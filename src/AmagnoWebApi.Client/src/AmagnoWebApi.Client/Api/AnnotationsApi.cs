/* 
 * AMAGNO HTTP/REST API Version 2
 *
 * <span>Use your own or the cloud version of AMAGNO with REST/JSON!</span>  <br /><br />  <b>General</b>  <br /><br />  <span>      The AMAGNO API uses the HTTP methods GET and POST to communicate with the service. This mechanism is often called REST. It returns either JSON for informations or direct stream with the actual content type for files. A simple response looks like this:  </span>  <code>      {      \"id\": \"61776573-6f6d-6520-6578-616d706c6521\",      \"name\": \"Document.pdf\"      }  </code>  <span>      If your AMAGNO server has the name \"myserver\", the URL to the AMAGNO API would be \"https://myserver/amagnome/api/v2/\".<br />      For this individual URL we will use the term <b>BASEURL</b> in the further documentation.  </span>  <br /><br />  <b>Authentication</b>  <br /><br />  <span>      API requests are only allowed by authenticated users. To authenticate users the AMAGNO API uses <a href=\"https://tools.ietf.org/html/rfc7519\">JSON Web Token</a>.      To receive this token a POST-request to https://myserver/amagnome/api/v2/token with credentials in body should be sent. Request example:  </span>  <code>      curl -X POST - -header 'Content-Type: application/json' - -header 'Accept: application/json' -d '{      \"userName\": \"user@company.com\",      \"password\": \"password\"      }' 'http://myserver/amagnome/api/v2/token'  </code>  <span>      If the data that is sent is correct, a response will be returned including HTTP status code \"200\" and the token within the body. To make other API requests this token should be sent in the HTTP header with the name \"Authorization\"      and the value \"Bearer {token}\". The expiration time is defined in the configuration (web.config of AmagnoRestApi2, AppSettings, Key \"JwtExpirationInMinutes\").  </span><br /><br />  <b>Security</b>  <br /><br />  <span>Only use the API via HTTPS and always make sure to validate the certificate on the client side.</span>  <br /><br />  <b>Request Example</b>  <br /><br />  <span>https://myserver/amagnome/api/v2/vaults with HTTP header \"Authorization\": \"Bearer token\"</span>  <br /><br />  <b>HTTP response codes</b>  <br />  <table>      <tbody>      <tr>          <td>              <p><span>Code</span></p>          </td>          <td>              <p><span>Description</span></p>          </td>      </tr>      <tr>          <td>              <p>2xx</p>          </td>          <td>              <p>The request was successful.</p>          </td>      </tr>      <tr>          <td>              <p>4xx</p>          </td>          <td>              <p>The request was not successful. Change the request to make it work.</p>          </td>      </tr>      <tr>          <td>              <p>5xx</p>          </td>          <td>              <p>An error occurred on the server side. Please try again.</p>          </td>      </tr>      </tbody>  </table>  <code></code>  <br />  <b>Unsuccessful request details</b>  <br /><br />        <span>            For responses with http status codes 400, 403 or 500, there are also error codes and messages in JSON format in the body of the response sent. For example:        </span>  <code>      {      \"code\": 2010,      \"message\": \"Document with same file exists in vault\"      }  </code>  <span>      \"code\" is an error identifier and \"message\" presents a 'human-friendly' phrase. When responses are sent by the IIS (Internet Information Service), this information is not displayed.  </span>  <br /><br />  <b>GUIDs</b>  <br /><br />  <span>      The AMAGNO API works mainly with worldwide unique identification numbers to address elements like vaults, magnets, documents amongst other things - known as GUID.<br />      Many requests will return element GUIDs.<br />      If you want to address a specific element in your AMAGNO, e.g.: a vault; you can find out the corresponding element's GUID. In order to do this, please log in to your AMAGNO Client for Windows and activate the Developer Mode in the Help Menu of your User Profile. For more information, please consult the AMAGNO User Manual.  </span>  <br /><br />  
 *
 * The version of the OpenAPI document: v2
 * Contact: support@amagno.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using AmagnoWebApi.Client.Client;
using AmagnoWebApi.Client.Model;

namespace AmagnoWebApi.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnnotationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the requested highlight annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>HighlightAnnotation</returns>
        HighlightAnnotation AnnotationsGetHighlightAnnotation (Guid annotationId, string authorization);

        /// <summary>
        /// Returns the requested highlight annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of HighlightAnnotation</returns>
        ApiResponse<HighlightAnnotation> AnnotationsGetHighlightAnnotationWithHttpInfo (Guid annotationId, string authorization);
        /// <summary>
        /// Returns the requested ink annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>InkAnnotation</returns>
        InkAnnotation AnnotationsGetInkAnnotation (Guid annotationId, string authorization);

        /// <summary>
        /// Returns the requested ink annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of InkAnnotation</returns>
        ApiResponse<InkAnnotation> AnnotationsGetInkAnnotationWithHttpInfo (Guid annotationId, string authorization);
        /// <summary>
        /// Returns the requested mark-line annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>MarkLineAnnotation</returns>
        MarkLineAnnotation AnnotationsGetMarkLineAnnotation (Guid annotationId, string authorization);

        /// <summary>
        /// Returns the requested mark-line annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of MarkLineAnnotation</returns>
        ApiResponse<MarkLineAnnotation> AnnotationsGetMarkLineAnnotationWithHttpInfo (Guid annotationId, string authorization);
        /// <summary>
        /// Returns the requested note annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>NoteAnnotation</returns>
        NoteAnnotation AnnotationsGetNoteAnnotation (Guid annotationId, string authorization);

        /// <summary>
        /// Returns the requested note annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of NoteAnnotation</returns>
        ApiResponse<NoteAnnotation> AnnotationsGetNoteAnnotationWithHttpInfo (Guid annotationId, string authorization);
        /// <summary>
        /// Returns the requested signature annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>SignatureAnnotation</returns>
        SignatureAnnotation AnnotationsGetSignatureAnnotation (Guid annotationId, string authorization);

        /// <summary>
        /// Returns the requested signature annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of SignatureAnnotation</returns>
        ApiResponse<SignatureAnnotation> AnnotationsGetSignatureAnnotationWithHttpInfo (Guid annotationId, string authorization);
        /// <summary>
        /// Returns the requested stamp annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>StampAnnotation</returns>
        StampAnnotation AnnotationsGetStampAnnotation (Guid annotationId, string authorization);

        /// <summary>
        /// Returns the requested stamp annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of StampAnnotation</returns>
        ApiResponse<StampAnnotation> AnnotationsGetStampAnnotationWithHttpInfo (Guid annotationId, string authorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns the requested highlight annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of HighlightAnnotation</returns>
        System.Threading.Tasks.Task<HighlightAnnotation> AnnotationsGetHighlightAnnotationAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the requested highlight annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (HighlightAnnotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<HighlightAnnotation>> AnnotationsGetHighlightAnnotationWithHttpInfoAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the requested ink annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InkAnnotation</returns>
        System.Threading.Tasks.Task<InkAnnotation> AnnotationsGetInkAnnotationAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the requested ink annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InkAnnotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<InkAnnotation>> AnnotationsGetInkAnnotationWithHttpInfoAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the requested mark-line annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MarkLineAnnotation</returns>
        System.Threading.Tasks.Task<MarkLineAnnotation> AnnotationsGetMarkLineAnnotationAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the requested mark-line annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MarkLineAnnotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkLineAnnotation>> AnnotationsGetMarkLineAnnotationWithHttpInfoAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the requested note annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NoteAnnotation</returns>
        System.Threading.Tasks.Task<NoteAnnotation> AnnotationsGetNoteAnnotationAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the requested note annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NoteAnnotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<NoteAnnotation>> AnnotationsGetNoteAnnotationWithHttpInfoAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the requested signature annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SignatureAnnotation</returns>
        System.Threading.Tasks.Task<SignatureAnnotation> AnnotationsGetSignatureAnnotationAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the requested signature annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SignatureAnnotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignatureAnnotation>> AnnotationsGetSignatureAnnotationWithHttpInfoAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the requested stamp annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of StampAnnotation</returns>
        System.Threading.Tasks.Task<StampAnnotation> AnnotationsGetStampAnnotationAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the requested stamp annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (StampAnnotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<StampAnnotation>> AnnotationsGetStampAnnotationWithHttpInfoAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnnotationsApi : IAnnotationsApi
    {
        private AmagnoWebApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnnotationsApi(String basePath)
        {
            this.Configuration = new AmagnoWebApi.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AmagnoWebApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AnnotationsApi()
        {
            this.Configuration = AmagnoWebApi.Client.Client.Configuration.Default;

            ExceptionFactory = AmagnoWebApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnnotationsApi(AmagnoWebApi.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AmagnoWebApi.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AmagnoWebApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AmagnoWebApi.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AmagnoWebApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns the requested highlight annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>HighlightAnnotation</returns>
        public HighlightAnnotation AnnotationsGetHighlightAnnotation (Guid annotationId, string authorization)
        {
             ApiResponse<HighlightAnnotation> localVarResponse = AnnotationsGetHighlightAnnotationWithHttpInfo(annotationId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested highlight annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of HighlightAnnotation</returns>
        public ApiResponse<HighlightAnnotation> AnnotationsGetHighlightAnnotationWithHttpInfo (Guid annotationId, string authorization)
        {
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling AnnotationsApi->AnnotationsGetHighlightAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnotationsApi->AnnotationsGetHighlightAnnotation");

            var localVarPath = "/annotations/highlights/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationId != null) localVarPathParams.Add("annotationId", this.Configuration.ApiClient.ParameterToString(annotationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnotationsGetHighlightAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HighlightAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HighlightAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HighlightAnnotation)));
        }

        /// <summary>
        /// Returns the requested highlight annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of HighlightAnnotation</returns>
        public async System.Threading.Tasks.Task<HighlightAnnotation> AnnotationsGetHighlightAnnotationAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<HighlightAnnotation> localVarResponse = await AnnotationsGetHighlightAnnotationWithHttpInfoAsync(annotationId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the requested highlight annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (HighlightAnnotation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HighlightAnnotation>> AnnotationsGetHighlightAnnotationWithHttpInfoAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling AnnotationsApi->AnnotationsGetHighlightAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnotationsApi->AnnotationsGetHighlightAnnotation");

            var localVarPath = "/annotations/highlights/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationId != null) localVarPathParams.Add("annotationId", this.Configuration.ApiClient.ParameterToString(annotationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnotationsGetHighlightAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HighlightAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HighlightAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HighlightAnnotation)));
        }

        /// <summary>
        /// Returns the requested ink annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>InkAnnotation</returns>
        public InkAnnotation AnnotationsGetInkAnnotation (Guid annotationId, string authorization)
        {
             ApiResponse<InkAnnotation> localVarResponse = AnnotationsGetInkAnnotationWithHttpInfo(annotationId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested ink annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of InkAnnotation</returns>
        public ApiResponse<InkAnnotation> AnnotationsGetInkAnnotationWithHttpInfo (Guid annotationId, string authorization)
        {
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling AnnotationsApi->AnnotationsGetInkAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnotationsApi->AnnotationsGetInkAnnotation");

            var localVarPath = "/annotations/inks/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationId != null) localVarPathParams.Add("annotationId", this.Configuration.ApiClient.ParameterToString(annotationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnotationsGetInkAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InkAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InkAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InkAnnotation)));
        }

        /// <summary>
        /// Returns the requested ink annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InkAnnotation</returns>
        public async System.Threading.Tasks.Task<InkAnnotation> AnnotationsGetInkAnnotationAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InkAnnotation> localVarResponse = await AnnotationsGetInkAnnotationWithHttpInfoAsync(annotationId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the requested ink annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InkAnnotation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InkAnnotation>> AnnotationsGetInkAnnotationWithHttpInfoAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling AnnotationsApi->AnnotationsGetInkAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnotationsApi->AnnotationsGetInkAnnotation");

            var localVarPath = "/annotations/inks/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationId != null) localVarPathParams.Add("annotationId", this.Configuration.ApiClient.ParameterToString(annotationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnotationsGetInkAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InkAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InkAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InkAnnotation)));
        }

        /// <summary>
        /// Returns the requested mark-line annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>MarkLineAnnotation</returns>
        public MarkLineAnnotation AnnotationsGetMarkLineAnnotation (Guid annotationId, string authorization)
        {
             ApiResponse<MarkLineAnnotation> localVarResponse = AnnotationsGetMarkLineAnnotationWithHttpInfo(annotationId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested mark-line annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of MarkLineAnnotation</returns>
        public ApiResponse<MarkLineAnnotation> AnnotationsGetMarkLineAnnotationWithHttpInfo (Guid annotationId, string authorization)
        {
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling AnnotationsApi->AnnotationsGetMarkLineAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnotationsApi->AnnotationsGetMarkLineAnnotation");

            var localVarPath = "/annotations/mark-lines/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationId != null) localVarPathParams.Add("annotationId", this.Configuration.ApiClient.ParameterToString(annotationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnotationsGetMarkLineAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkLineAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarkLineAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkLineAnnotation)));
        }

        /// <summary>
        /// Returns the requested mark-line annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MarkLineAnnotation</returns>
        public async System.Threading.Tasks.Task<MarkLineAnnotation> AnnotationsGetMarkLineAnnotationAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MarkLineAnnotation> localVarResponse = await AnnotationsGetMarkLineAnnotationWithHttpInfoAsync(annotationId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the requested mark-line annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MarkLineAnnotation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkLineAnnotation>> AnnotationsGetMarkLineAnnotationWithHttpInfoAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling AnnotationsApi->AnnotationsGetMarkLineAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnotationsApi->AnnotationsGetMarkLineAnnotation");

            var localVarPath = "/annotations/mark-lines/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationId != null) localVarPathParams.Add("annotationId", this.Configuration.ApiClient.ParameterToString(annotationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnotationsGetMarkLineAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkLineAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarkLineAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkLineAnnotation)));
        }

        /// <summary>
        /// Returns the requested note annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>NoteAnnotation</returns>
        public NoteAnnotation AnnotationsGetNoteAnnotation (Guid annotationId, string authorization)
        {
             ApiResponse<NoteAnnotation> localVarResponse = AnnotationsGetNoteAnnotationWithHttpInfo(annotationId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested note annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of NoteAnnotation</returns>
        public ApiResponse<NoteAnnotation> AnnotationsGetNoteAnnotationWithHttpInfo (Guid annotationId, string authorization)
        {
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling AnnotationsApi->AnnotationsGetNoteAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnotationsApi->AnnotationsGetNoteAnnotation");

            var localVarPath = "/annotations/notes/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationId != null) localVarPathParams.Add("annotationId", this.Configuration.ApiClient.ParameterToString(annotationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnotationsGetNoteAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NoteAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NoteAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NoteAnnotation)));
        }

        /// <summary>
        /// Returns the requested note annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NoteAnnotation</returns>
        public async System.Threading.Tasks.Task<NoteAnnotation> AnnotationsGetNoteAnnotationAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<NoteAnnotation> localVarResponse = await AnnotationsGetNoteAnnotationWithHttpInfoAsync(annotationId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the requested note annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NoteAnnotation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NoteAnnotation>> AnnotationsGetNoteAnnotationWithHttpInfoAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling AnnotationsApi->AnnotationsGetNoteAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnotationsApi->AnnotationsGetNoteAnnotation");

            var localVarPath = "/annotations/notes/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationId != null) localVarPathParams.Add("annotationId", this.Configuration.ApiClient.ParameterToString(annotationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnotationsGetNoteAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NoteAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NoteAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NoteAnnotation)));
        }

        /// <summary>
        /// Returns the requested signature annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>SignatureAnnotation</returns>
        public SignatureAnnotation AnnotationsGetSignatureAnnotation (Guid annotationId, string authorization)
        {
             ApiResponse<SignatureAnnotation> localVarResponse = AnnotationsGetSignatureAnnotationWithHttpInfo(annotationId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested signature annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of SignatureAnnotation</returns>
        public ApiResponse<SignatureAnnotation> AnnotationsGetSignatureAnnotationWithHttpInfo (Guid annotationId, string authorization)
        {
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling AnnotationsApi->AnnotationsGetSignatureAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnotationsApi->AnnotationsGetSignatureAnnotation");

            var localVarPath = "/annotations/signatures/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationId != null) localVarPathParams.Add("annotationId", this.Configuration.ApiClient.ParameterToString(annotationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnotationsGetSignatureAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignatureAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SignatureAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignatureAnnotation)));
        }

        /// <summary>
        /// Returns the requested signature annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SignatureAnnotation</returns>
        public async System.Threading.Tasks.Task<SignatureAnnotation> AnnotationsGetSignatureAnnotationAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SignatureAnnotation> localVarResponse = await AnnotationsGetSignatureAnnotationWithHttpInfoAsync(annotationId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the requested signature annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SignatureAnnotation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignatureAnnotation>> AnnotationsGetSignatureAnnotationWithHttpInfoAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling AnnotationsApi->AnnotationsGetSignatureAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnotationsApi->AnnotationsGetSignatureAnnotation");

            var localVarPath = "/annotations/signatures/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationId != null) localVarPathParams.Add("annotationId", this.Configuration.ApiClient.ParameterToString(annotationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnotationsGetSignatureAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignatureAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SignatureAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignatureAnnotation)));
        }

        /// <summary>
        /// Returns the requested stamp annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>StampAnnotation</returns>
        public StampAnnotation AnnotationsGetStampAnnotation (Guid annotationId, string authorization)
        {
             ApiResponse<StampAnnotation> localVarResponse = AnnotationsGetStampAnnotationWithHttpInfo(annotationId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested stamp annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of StampAnnotation</returns>
        public ApiResponse<StampAnnotation> AnnotationsGetStampAnnotationWithHttpInfo (Guid annotationId, string authorization)
        {
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling AnnotationsApi->AnnotationsGetStampAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnotationsApi->AnnotationsGetStampAnnotation");

            var localVarPath = "/annotations/stamps/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationId != null) localVarPathParams.Add("annotationId", this.Configuration.ApiClient.ParameterToString(annotationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnotationsGetStampAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StampAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StampAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StampAnnotation)));
        }

        /// <summary>
        /// Returns the requested stamp annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of StampAnnotation</returns>
        public async System.Threading.Tasks.Task<StampAnnotation> AnnotationsGetStampAnnotationAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<StampAnnotation> localVarResponse = await AnnotationsGetStampAnnotationWithHttpInfoAsync(annotationId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the requested stamp annotation 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationId">GUID of the annotation</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (StampAnnotation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StampAnnotation>> AnnotationsGetStampAnnotationWithHttpInfoAsync (Guid annotationId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling AnnotationsApi->AnnotationsGetStampAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnotationsApi->AnnotationsGetStampAnnotation");

            var localVarPath = "/annotations/stamps/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationId != null) localVarPathParams.Add("annotationId", this.Configuration.ApiClient.ParameterToString(annotationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnotationsGetStampAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StampAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StampAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StampAnnotation)));
        }

    }
}

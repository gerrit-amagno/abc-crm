/* 
 * AMAGNO HTTP/REST API Version 2
 *
 * <span>Use your own or the cloud version of AMAGNO with REST/JSON!</span>  <br /><br />  <b>General</b>  <br /><br />  <span>      The AMAGNO API uses the HTTP methods GET and POST to communicate with the service. This mechanism is often called REST. It returns either JSON for informations or direct stream with the actual content type for files. A simple response looks like this:  </span>  <code>      {      \"id\": \"61776573-6f6d-6520-6578-616d706c6521\",      \"name\": \"Document.pdf\"      }  </code>  <span>      If your AMAGNO server has the name \"myserver\", the URL to the AMAGNO API would be \"https://myserver/amagnome/api/v2/\".<br />      For this individual URL we will use the term <b>BASEURL</b> in the further documentation.  </span>  <br /><br />  <b>Authentication</b>  <br /><br />  <span>      API requests are only allowed by authenticated users. To authenticate users the AMAGNO API uses <a href=\"https://tools.ietf.org/html/rfc7519\">JSON Web Token</a>.      To receive this token a POST-request to https://myserver/amagnome/api/v2/token with credentials in body should be sent. Request example:  </span>  <code>      curl -X POST - -header 'Content-Type: application/json' - -header 'Accept: application/json' -d '{      \"userName\": \"user@company.com\",      \"password\": \"password\"      }' 'http://myserver/amagnome/api/v2/token'  </code>  <span>      If the data that is sent is correct, a response will be returned including HTTP status code \"200\" and the token within the body. To make other API requests this token should be sent in the HTTP header with the name \"Authorization\"      and the value \"Bearer {token}\". The expiration time is defined in the configuration (web.config of AmagnoRestApi2, AppSettings, Key \"JwtExpirationInMinutes\").  </span><br /><br />  <b>Security</b>  <br /><br />  <span>Only use the API via HTTPS and always make sure to validate the certificate on the client side.</span>  <br /><br />  <b>Request Example</b>  <br /><br />  <span>https://myserver/amagnome/api/v2/vaults with HTTP header \"Authorization\": \"Bearer token\"</span>  <br /><br />  <b>HTTP response codes</b>  <br />  <table>      <tbody>      <tr>          <td>              <p><span>Code</span></p>          </td>          <td>              <p><span>Description</span></p>          </td>      </tr>      <tr>          <td>              <p>2xx</p>          </td>          <td>              <p>The request was successful.</p>          </td>      </tr>      <tr>          <td>              <p>4xx</p>          </td>          <td>              <p>The request was not successful. Change the request to make it work.</p>          </td>      </tr>      <tr>          <td>              <p>5xx</p>          </td>          <td>              <p>An error occurred on the server side. Please try again.</p>          </td>      </tr>      </tbody>  </table>  <code></code>  <br />  <b>Unsuccessful request details</b>  <br /><br />        <span>            For responses with http status codes 400, 403 or 500, there are also error codes and messages in JSON format in the body of the response sent. For example:        </span>  <code>      {      \"code\": 2010,      \"message\": \"Document with same file exists in vault\"      }  </code>  <span>      \"code\" is an error identifier and \"message\" presents a 'human-friendly' phrase. When responses are sent by the IIS (Internet Information Service), this information is not displayed.  </span>  <br /><br />  <b>GUIDs</b>  <br /><br />  <span>      The AMAGNO API works mainly with worldwide unique identification numbers to address elements like vaults, magnets, documents amongst other things - known as GUID.<br />      Many requests will return element GUIDs.<br />      If you want to address a specific element in your AMAGNO, e.g.: a vault; you can find out the corresponding element's GUID. In order to do this, please log in to your AMAGNO Client for Windows and activate the Developer Mode in the Help Menu of your User Profile. For more information, please consult the AMAGNO User Manual.  </span>  <br /><br />  
 *
 * The version of the OpenAPI document: v2
 * Contact: support@amagno.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using AmagnoWebApi.Client.Client;
using AmagnoWebApi.Client.Model;

namespace AmagnoWebApi.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates assignment between two documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="assignment">Assignment parameters</param>
        /// <returns>Object</returns>
        Object DocumentsAssign (string authorization, AssignmentCreationData assignment);

        /// <summary>
        /// Creates assignment between two documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="assignment">Assignment parameters</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsAssignWithHttpInfo (string authorization, AssignmentCreationData assignment);
        /// <summary>
        /// Creates new version of the document to edit (check-out) only by the requested user.  All changes made to the document can be once applied or reverted
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>Object</returns>
        Object DocumentsCheckOut (Guid documentId, string authorization);

        /// <summary>
        /// Creates new version of the document to edit (check-out) only by the requested user.  All changes made to the document can be once applied or reverted
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsCheckOutWithHttpInfo (Guid documentId, string authorization);
        /// <summary>
        /// Creates highlight annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>Object</returns>
        Object DocumentsCreateHighlightAnnotation (Guid documentId, string authorization, HighlightAnnotationCreationData model);

        /// <summary>
        /// Creates highlight annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsCreateHighlightAnnotationWithHttpInfo (Guid documentId, string authorization, HighlightAnnotationCreationData model);
        /// <summary>
        /// Creates ink annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>Object</returns>
        Object DocumentsCreateInkAnnotation (Guid documentId, string authorization, InkAnnotationCreationData model);

        /// <summary>
        /// Creates ink annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsCreateInkAnnotationWithHttpInfo (Guid documentId, string authorization, InkAnnotationCreationData model);
        /// <summary>
        /// Creates mark-line annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>Object</returns>
        Object DocumentsCreateMarkLineAnnotation (Guid documentId, string authorization, MarkLineAnnotationCreationData model);

        /// <summary>
        /// Creates mark-line annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsCreateMarkLineAnnotationWithHttpInfo (Guid documentId, string authorization, MarkLineAnnotationCreationData model);
        /// <summary>
        /// Creates note annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>Object</returns>
        Object DocumentsCreateNoteAnnotation (Guid documentId, string authorization, NoteAnnotationCreationData model);

        /// <summary>
        /// Creates note annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsCreateNoteAnnotationWithHttpInfo (Guid documentId, string authorization, NoteAnnotationCreationData model);
        /// <summary>
        /// Creates signature annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>Object</returns>
        Object DocumentsCreateSignatureAnnotation (Guid documentId, string authorization, SignatureAnnotationCreationData model);

        /// <summary>
        /// Creates signature annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsCreateSignatureAnnotationWithHttpInfo (Guid documentId, string authorization, SignatureAnnotationCreationData model);
        /// <summary>
        /// Creates multi tag group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Tag group information</param>
        /// <returns>Object</returns>
        Object DocumentsCreateTagGroup (Guid documentId, string authorization, TagGroupCreationData model);

        /// <summary>
        /// Creates multi tag group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Tag group information</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsCreateTagGroupWithHttpInfo (Guid documentId, string authorization, TagGroupCreationData model);
        /// <summary>
        /// Returns information about the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <returns>Document</returns>
        Document DocumentsGet (Guid documentId, string authorization, bool? includeTags = default(bool?));

        /// <summary>
        /// Returns information about the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <returns>ApiResponse of Document</returns>
        ApiResponse<Document> DocumentsGetWithHttpInfo (Guid documentId, string authorization, bool? includeTags = default(bool?));
        /// <summary>
        /// Returns accessible stamps for a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;Stamp&gt;</returns>
        List<Stamp> DocumentsGetAccessibleStamps (Guid documentId, string authorization);

        /// <summary>
        /// Returns accessible stamps for a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;Stamp&gt;</returns>
        ApiResponse<List<Stamp>> DocumentsGetAccessibleStampsWithHttpInfo (Guid documentId, string authorization);
        /// <summary>
        /// Returns document search information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>SearchInformation</returns>
        SearchInformation DocumentsGetAdvancedSearchInformation (Guid searchId, string authorization);

        /// <summary>
        /// Returns document search information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of SearchInformation</returns>
        ApiResponse<SearchInformation> DocumentsGetAdvancedSearchInformationWithHttpInfo (Guid searchId, string authorization);
        /// <summary>
        /// Returns document search results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>List&lt;Document&gt;</returns>
        List<Document> DocumentsGetAdvancedSearchResults (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?));

        /// <summary>
        /// Returns document search results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        ApiResponse<List<Document>> DocumentsGetAdvancedSearchResultsWithHttpInfo (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?));
        /// <summary>
        /// Returns document annotations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>AnnotationCollections</returns>
        AnnotationCollections DocumentsGetAnnotations (Guid documentId, string authorization);

        /// <summary>
        /// Returns document annotations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of AnnotationCollections</returns>
        ApiResponse<AnnotationCollections> DocumentsGetAnnotationsWithHttpInfo (Guid documentId, string authorization);
        /// <summary>
        /// Returns document assignments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>AssignmentCollections</returns>
        AssignmentCollections DocumentsGetAssigns (Guid documentId, string authorization);

        /// <summary>
        /// Returns document assignments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of AssignmentCollections</returns>
        ApiResponse<AssignmentCollections> DocumentsGetAssignsWithHttpInfo (Guid documentId, string authorization);
        /// <summary>
        /// Returns the document in its original format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>Object</returns>
        Object DocumentsGetOriginalFormat (Guid documentId, string authorization);

        /// <summary>
        /// Returns the document in its original format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsGetOriginalFormatWithHttpInfo (Guid documentId, string authorization);
        /// <summary>
        /// Returns the document as PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>Object</returns>
        Object DocumentsGetPDFFormat (Guid documentId, string authorization);

        /// <summary>
        /// Returns the document as PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsGetPDFFormatWithHttpInfo (Guid documentId, string authorization);
        /// <summary>
        /// Returns the document including any annotations as a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>Object</returns>
        Object DocumentsGetPDFFormatWithAnnotations (Guid documentId, string authorization);

        /// <summary>
        /// Returns the document including any annotations as a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsGetPDFFormatWithAnnotationsWithHttpInfo (Guid documentId, string authorization);
        /// <summary>
        /// Returns a preview of the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="page">The desired page number (starts at 1)</param>
        /// <param name="size">The desired size of the preview image</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>Object</returns>
        Object DocumentsGetPreviewImage (Guid documentId, int page, string size, string authorization);

        /// <summary>
        /// Returns a preview of the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="page">The desired page number (starts at 1)</param>
        /// <param name="size">The desired size of the preview image</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsGetPreviewImageWithHttpInfo (Guid documentId, int page, string size, string authorization);
        /// <summary>
        /// Returns document search information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>SearchInformation</returns>
        SearchInformation DocumentsGetSearchInformation (Guid searchId, string authorization);

        /// <summary>
        /// Returns document search information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of SearchInformation</returns>
        ApiResponse<SearchInformation> DocumentsGetSearchInformationWithHttpInfo (Guid searchId, string authorization);
        /// <summary>
        /// Returns document search results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>List&lt;Document&gt;</returns>
        List<Document> DocumentsGetSearchResults (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?));

        /// <summary>
        /// Returns document search results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        ApiResponse<List<Document>> DocumentsGetSearchResultsWithHttpInfo (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?));
        /// <summary>
        /// Returns all document tag definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>TagDefinitionCollections</returns>
        TagDefinitionCollections DocumentsGetTagDefinitions (string authorization);

        /// <summary>
        /// Returns all document tag definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of TagDefinitionCollections</returns>
        ApiResponse<TagDefinitionCollections> DocumentsGetTagDefinitionsWithHttpInfo (string authorization);
        /// <summary>
        /// Returns document tag groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;TagGroup&gt;</returns>
        List<TagGroup> DocumentsGetTagGroups (Guid documentId, string authorization);

        /// <summary>
        /// Returns document tag groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;TagGroup&gt;</returns>
        ApiResponse<List<TagGroup>> DocumentsGetTagGroupsWithHttpInfo (Guid documentId, string authorization);
        /// <summary>
        /// Returns document tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>TagCollections</returns>
        TagCollections DocumentsGetTags (Guid documentId, string authorization);

        /// <summary>
        /// Returns document tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of TagCollections</returns>
        ApiResponse<TagCollections> DocumentsGetTagsWithHttpInfo (Guid documentId, string authorization);
        /// <summary>
        /// Initializes document search for the given search condition and saves results on the server. These results are available for 2 hours from the last access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <returns>Object</returns>
        Object DocumentsInitAdvancedSearch (string authorization, AdvancedDocumentSearchFilter filter);

        /// <summary>
        /// Initializes document search for the given search condition and saves results on the server. These results are available for 2 hours from the last access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsInitAdvancedSearchWithHttpInfo (string authorization, AdvancedDocumentSearchFilter filter);
        /// <summary>
        /// Initializes document search for the given search string and saves results on the server. These results are available for 2 hours from the last access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <returns>Object</returns>
        Object DocumentsInitSearch (string authorization, DocumentSearchFilter filter);

        /// <summary>
        /// Initializes document search for the given search string and saves results on the server. These results are available for 2 hours from the last access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsInitSearchWithHttpInfo (string authorization, DocumentSearchFilter filter);
        /// <summary>
        /// Sets file content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <param name="amagnoFileCreateDate">File create UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <param name="amagnoFileChangeDate">Last file change UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <returns>Object</returns>
        // Object DocumentsPutStream (Guid documentId, string authorization, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string amagnoFileCreateDate = default(string), string amagnoFileChangeDate = default(string));

        /// <summary>
        /// Sets file content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <param name="amagnoFileCreateDate">File create UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <param name="amagnoFileChangeDate">Last file change UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        // ApiResponse<Object> DocumentsPutStreamWithHttpInfo (Guid documentId, string authorization, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string amagnoFileCreateDate = default(string), string amagnoFileChangeDate = default(string));
        /// <summary>
        /// Stamps a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="stampingData">Stamp parameters</param>
        /// <returns>Object</returns>
        Object DocumentsStampDocument (Guid documentId, string authorization, StampingData stampingData);

        /// <summary>
        /// Stamps a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="stampingData">Stamp parameters</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsStampDocumentWithHttpInfo (Guid documentId, string authorization, StampingData stampingData);
        /// <summary>
        /// Throws the selected document into the trash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>Object</returns>
        Object DocumentsTrash (Guid documentId, string authorization);

        /// <summary>
        /// Throws the selected document into the trash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsTrashWithHttpInfo (Guid documentId, string authorization);
        /// <summary>
        /// Updates a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="data">Document data</param>
        /// <returns>Object</returns>
        Object DocumentsUpdate (Guid documentId, string authorization, DocumentUpdateData data);

        /// <summary>
        /// Updates a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="data">Document data</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DocumentsUpdateWithHttpInfo (Guid documentId, string authorization, DocumentUpdateData data);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates assignment between two documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="assignment">Assignment parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsAssignAsync (string authorization, AssignmentCreationData assignment, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates assignment between two documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="assignment">Assignment parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsAssignWithHttpInfoAsync (string authorization, AssignmentCreationData assignment, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates new version of the document to edit (check-out) only by the requested user.  All changes made to the document can be once applied or reverted
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsCheckOutAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates new version of the document to edit (check-out) only by the requested user.  All changes made to the document can be once applied or reverted
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCheckOutWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates highlight annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsCreateHighlightAnnotationAsync (Guid documentId, string authorization, HighlightAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates highlight annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCreateHighlightAnnotationWithHttpInfoAsync (Guid documentId, string authorization, HighlightAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates ink annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsCreateInkAnnotationAsync (Guid documentId, string authorization, InkAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates ink annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCreateInkAnnotationWithHttpInfoAsync (Guid documentId, string authorization, InkAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates mark-line annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsCreateMarkLineAnnotationAsync (Guid documentId, string authorization, MarkLineAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates mark-line annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCreateMarkLineAnnotationWithHttpInfoAsync (Guid documentId, string authorization, MarkLineAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates note annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsCreateNoteAnnotationAsync (Guid documentId, string authorization, NoteAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates note annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCreateNoteAnnotationWithHttpInfoAsync (Guid documentId, string authorization, NoteAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates signature annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsCreateSignatureAnnotationAsync (Guid documentId, string authorization, SignatureAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates signature annotation
        /// </summary>
        /// <remarks>
        /// The document has to be checked out beforehand.
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCreateSignatureAnnotationWithHttpInfoAsync (Guid documentId, string authorization, SignatureAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates multi tag group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Tag group information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsCreateTagGroupAsync (Guid documentId, string authorization, TagGroupCreationData model, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates multi tag group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Tag group information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCreateTagGroupWithHttpInfoAsync (Guid documentId, string authorization, TagGroupCreationData model, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns information about the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Document</returns>
        System.Threading.Tasks.Task<Document> DocumentsGetAsync (Guid documentId, string authorization, bool? includeTags = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns information about the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Document)</returns>
        System.Threading.Tasks.Task<ApiResponse<Document>> DocumentsGetWithHttpInfoAsync (Guid documentId, string authorization, bool? includeTags = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns accessible stamps for a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Stamp&gt;</returns>
        System.Threading.Tasks.Task<List<Stamp>> DocumentsGetAccessibleStampsAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns accessible stamps for a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Stamp&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Stamp>>> DocumentsGetAccessibleStampsWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns document search information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SearchInformation</returns>
        System.Threading.Tasks.Task<SearchInformation> DocumentsGetAdvancedSearchInformationAsync (Guid searchId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns document search information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SearchInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchInformation>> DocumentsGetAdvancedSearchInformationWithHttpInfoAsync (Guid searchId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns document search results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        System.Threading.Tasks.Task<List<Document>> DocumentsGetAdvancedSearchResultsAsync (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns document search results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Document>>> DocumentsGetAdvancedSearchResultsWithHttpInfoAsync (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns document annotations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnotationCollections</returns>
        System.Threading.Tasks.Task<AnnotationCollections> DocumentsGetAnnotationsAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns document annotations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnotationCollections)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationCollections>> DocumentsGetAnnotationsWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns document assignments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AssignmentCollections</returns>
        System.Threading.Tasks.Task<AssignmentCollections> DocumentsGetAssignsAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns document assignments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AssignmentCollections)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssignmentCollections>> DocumentsGetAssignsWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the document in its original format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsGetOriginalFormatAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the document in its original format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsGetOriginalFormatWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the document as PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsGetPDFFormatAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the document as PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsGetPDFFormatWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the document including any annotations as a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsGetPDFFormatWithAnnotationsAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the document including any annotations as a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsGetPDFFormatWithAnnotationsWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a preview of the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="page">The desired page number (starts at 1)</param>
        /// <param name="size">The desired size of the preview image</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsGetPreviewImageAsync (Guid documentId, int page, string size, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a preview of the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="page">The desired page number (starts at 1)</param>
        /// <param name="size">The desired size of the preview image</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsGetPreviewImageWithHttpInfoAsync (Guid documentId, int page, string size, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns document search information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SearchInformation</returns>
        System.Threading.Tasks.Task<SearchInformation> DocumentsGetSearchInformationAsync (Guid searchId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns document search information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SearchInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchInformation>> DocumentsGetSearchInformationWithHttpInfoAsync (Guid searchId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns document search results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        System.Threading.Tasks.Task<List<Document>> DocumentsGetSearchResultsAsync (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns document search results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Document>>> DocumentsGetSearchResultsWithHttpInfoAsync (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all document tag definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TagDefinitionCollections</returns>
        System.Threading.Tasks.Task<TagDefinitionCollections> DocumentsGetTagDefinitionsAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all document tag definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TagDefinitionCollections)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagDefinitionCollections>> DocumentsGetTagDefinitionsWithHttpInfoAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns document tag groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TagGroup&gt;</returns>
        System.Threading.Tasks.Task<List<TagGroup>> DocumentsGetTagGroupsAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns document tag groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TagGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TagGroup>>> DocumentsGetTagGroupsWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns document tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TagCollections</returns>
        System.Threading.Tasks.Task<TagCollections> DocumentsGetTagsAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns document tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TagCollections)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagCollections>> DocumentsGetTagsWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Initializes document search for the given search condition and saves results on the server. These results are available for 2 hours from the last access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsInitAdvancedSearchAsync (string authorization, AdvancedDocumentSearchFilter filter, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Initializes document search for the given search condition and saves results on the server. These results are available for 2 hours from the last access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsInitAdvancedSearchWithHttpInfoAsync (string authorization, AdvancedDocumentSearchFilter filter, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Initializes document search for the given search string and saves results on the server. These results are available for 2 hours from the last access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsInitSearchAsync (string authorization, DocumentSearchFilter filter, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Initializes document search for the given search string and saves results on the server. These results are available for 2 hours from the last access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsInitSearchWithHttpInfoAsync (string authorization, DocumentSearchFilter filter, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets file content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <param name="amagnoFileCreateDate">File create UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <param name="amagnoFileChangeDate">Last file change UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        // System.Threading.Tasks.Task<Object> DocumentsPutStreamAsync (Guid documentId, string authorization, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string amagnoFileCreateDate = default(string), string amagnoFileChangeDate = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets file content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <param name="amagnoFileCreateDate">File create UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <param name="amagnoFileChangeDate">Last file change UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        // System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsPutStreamWithHttpInfoAsync (Guid documentId, string authorization, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string amagnoFileCreateDate = default(string), string amagnoFileChangeDate = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Stamps a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="stampingData">Stamp parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsStampDocumentAsync (Guid documentId, string authorization, StampingData stampingData, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stamps a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="stampingData">Stamp parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsStampDocumentWithHttpInfoAsync (Guid documentId, string authorization, StampingData stampingData, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Throws the selected document into the trash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsTrashAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Throws the selected document into the trash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsTrashWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="data">Document data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DocumentsUpdateAsync (Guid documentId, string authorization, DocumentUpdateData data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="data">Document data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsUpdateWithHttpInfoAsync (Guid documentId, string authorization, DocumentUpdateData data, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentsApi : IDocumentsApi
    {
        private AmagnoWebApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi(String basePath)
        {
            this.Configuration = new AmagnoWebApi.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AmagnoWebApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public DocumentsApi()
        {
            this.Configuration = AmagnoWebApi.Client.Client.Configuration.Default;

            ExceptionFactory = AmagnoWebApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentsApi(AmagnoWebApi.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AmagnoWebApi.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AmagnoWebApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AmagnoWebApi.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AmagnoWebApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates assignment between two documents 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="assignment">Assignment parameters</param>
        /// <returns>Object</returns>
        public Object DocumentsAssign (string authorization, AssignmentCreationData assignment)
        {
             ApiResponse<Object> localVarResponse = DocumentsAssignWithHttpInfo(authorization, assignment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates assignment between two documents 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="assignment">Assignment parameters</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsAssignWithHttpInfo (string authorization, AssignmentCreationData assignment)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsAssign");
            // verify the required parameter 'assignment' is set
            if (assignment == null)
                throw new ApiException(400, "Missing required parameter 'assignment' when calling DocumentsApi->DocumentsAssign");

            var localVarPath = "/documents/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (assignment != null && assignment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates assignment between two documents 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="assignment">Assignment parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsAssignAsync (string authorization, AssignmentCreationData assignment, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsAssignWithHttpInfoAsync(authorization, assignment, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates assignment between two documents 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="assignment">Assignment parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsAssignWithHttpInfoAsync (string authorization, AssignmentCreationData assignment, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsAssign");
            // verify the required parameter 'assignment' is set
            if (assignment == null)
                throw new ApiException(400, "Missing required parameter 'assignment' when calling DocumentsApi->DocumentsAssign");

            var localVarPath = "/documents/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (assignment != null && assignment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates new version of the document to edit (check-out) only by the requested user.  All changes made to the document can be once applied or reverted 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>Object</returns>
        public Object DocumentsCheckOut (Guid documentId, string authorization)
        {
             ApiResponse<Object> localVarResponse = DocumentsCheckOutWithHttpInfo(documentId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new version of the document to edit (check-out) only by the requested user.  All changes made to the document can be once applied or reverted 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsCheckOutWithHttpInfo (Guid documentId, string authorization)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCheckOut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCheckOut");

            var localVarPath = "/documents/{documentId}/check-out";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCheckOut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates new version of the document to edit (check-out) only by the requested user.  All changes made to the document can be once applied or reverted 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsCheckOutAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsCheckOutWithHttpInfoAsync(documentId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates new version of the document to edit (check-out) only by the requested user.  All changes made to the document can be once applied or reverted 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCheckOutWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCheckOut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCheckOut");

            var localVarPath = "/documents/{documentId}/check-out";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCheckOut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates highlight annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>Object</returns>
        public Object DocumentsCreateHighlightAnnotation (Guid documentId, string authorization, HighlightAnnotationCreationData model)
        {
             ApiResponse<Object> localVarResponse = DocumentsCreateHighlightAnnotationWithHttpInfo(documentId, authorization, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates highlight annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsCreateHighlightAnnotationWithHttpInfo (Guid documentId, string authorization, HighlightAnnotationCreationData model)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCreateHighlightAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCreateHighlightAnnotation");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling DocumentsApi->DocumentsCreateHighlightAnnotation");

            var localVarPath = "/documents/{documentId}/annotations/highlights";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCreateHighlightAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates highlight annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsCreateHighlightAnnotationAsync (Guid documentId, string authorization, HighlightAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsCreateHighlightAnnotationWithHttpInfoAsync(documentId, authorization, model, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates highlight annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCreateHighlightAnnotationWithHttpInfoAsync (Guid documentId, string authorization, HighlightAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCreateHighlightAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCreateHighlightAnnotation");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling DocumentsApi->DocumentsCreateHighlightAnnotation");

            var localVarPath = "/documents/{documentId}/annotations/highlights";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCreateHighlightAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates ink annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>Object</returns>
        public Object DocumentsCreateInkAnnotation (Guid documentId, string authorization, InkAnnotationCreationData model)
        {
             ApiResponse<Object> localVarResponse = DocumentsCreateInkAnnotationWithHttpInfo(documentId, authorization, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates ink annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsCreateInkAnnotationWithHttpInfo (Guid documentId, string authorization, InkAnnotationCreationData model)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCreateInkAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCreateInkAnnotation");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling DocumentsApi->DocumentsCreateInkAnnotation");

            var localVarPath = "/documents/{documentId}/annotations/inks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCreateInkAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates ink annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsCreateInkAnnotationAsync (Guid documentId, string authorization, InkAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsCreateInkAnnotationWithHttpInfoAsync(documentId, authorization, model, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates ink annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCreateInkAnnotationWithHttpInfoAsync (Guid documentId, string authorization, InkAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCreateInkAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCreateInkAnnotation");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling DocumentsApi->DocumentsCreateInkAnnotation");

            var localVarPath = "/documents/{documentId}/annotations/inks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCreateInkAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates mark-line annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>Object</returns>
        public Object DocumentsCreateMarkLineAnnotation (Guid documentId, string authorization, MarkLineAnnotationCreationData model)
        {
             ApiResponse<Object> localVarResponse = DocumentsCreateMarkLineAnnotationWithHttpInfo(documentId, authorization, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates mark-line annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsCreateMarkLineAnnotationWithHttpInfo (Guid documentId, string authorization, MarkLineAnnotationCreationData model)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCreateMarkLineAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCreateMarkLineAnnotation");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling DocumentsApi->DocumentsCreateMarkLineAnnotation");

            var localVarPath = "/documents/{documentId}/annotations/mark-lines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCreateMarkLineAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates mark-line annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsCreateMarkLineAnnotationAsync (Guid documentId, string authorization, MarkLineAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsCreateMarkLineAnnotationWithHttpInfoAsync(documentId, authorization, model, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates mark-line annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCreateMarkLineAnnotationWithHttpInfoAsync (Guid documentId, string authorization, MarkLineAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCreateMarkLineAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCreateMarkLineAnnotation");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling DocumentsApi->DocumentsCreateMarkLineAnnotation");

            var localVarPath = "/documents/{documentId}/annotations/mark-lines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCreateMarkLineAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates note annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>Object</returns>
        public Object DocumentsCreateNoteAnnotation (Guid documentId, string authorization, NoteAnnotationCreationData model)
        {
             ApiResponse<Object> localVarResponse = DocumentsCreateNoteAnnotationWithHttpInfo(documentId, authorization, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates note annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsCreateNoteAnnotationWithHttpInfo (Guid documentId, string authorization, NoteAnnotationCreationData model)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCreateNoteAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCreateNoteAnnotation");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling DocumentsApi->DocumentsCreateNoteAnnotation");

            var localVarPath = "/documents/{documentId}/annotations/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCreateNoteAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates note annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsCreateNoteAnnotationAsync (Guid documentId, string authorization, NoteAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsCreateNoteAnnotationWithHttpInfoAsync(documentId, authorization, model, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates note annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCreateNoteAnnotationWithHttpInfoAsync (Guid documentId, string authorization, NoteAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCreateNoteAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCreateNoteAnnotation");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling DocumentsApi->DocumentsCreateNoteAnnotation");

            var localVarPath = "/documents/{documentId}/annotations/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCreateNoteAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates signature annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>Object</returns>
        public Object DocumentsCreateSignatureAnnotation (Guid documentId, string authorization, SignatureAnnotationCreationData model)
        {
             ApiResponse<Object> localVarResponse = DocumentsCreateSignatureAnnotationWithHttpInfo(documentId, authorization, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates signature annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsCreateSignatureAnnotationWithHttpInfo (Guid documentId, string authorization, SignatureAnnotationCreationData model)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCreateSignatureAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCreateSignatureAnnotation");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling DocumentsApi->DocumentsCreateSignatureAnnotation");

            var localVarPath = "/documents/{documentId}/annotations/signatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCreateSignatureAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates signature annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsCreateSignatureAnnotationAsync (Guid documentId, string authorization, SignatureAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsCreateSignatureAnnotationWithHttpInfoAsync(documentId, authorization, model, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates signature annotation The document has to be checked out beforehand.
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Annotation information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCreateSignatureAnnotationWithHttpInfoAsync (Guid documentId, string authorization, SignatureAnnotationCreationData model, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCreateSignatureAnnotation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCreateSignatureAnnotation");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling DocumentsApi->DocumentsCreateSignatureAnnotation");

            var localVarPath = "/documents/{documentId}/annotations/signatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCreateSignatureAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates multi tag group 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Tag group information</param>
        /// <returns>Object</returns>
        public Object DocumentsCreateTagGroup (Guid documentId, string authorization, TagGroupCreationData model)
        {
             ApiResponse<Object> localVarResponse = DocumentsCreateTagGroupWithHttpInfo(documentId, authorization, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates multi tag group 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Tag group information</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsCreateTagGroupWithHttpInfo (Guid documentId, string authorization, TagGroupCreationData model)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCreateTagGroup");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCreateTagGroup");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling DocumentsApi->DocumentsCreateTagGroup");

            var localVarPath = "/documents/{documentId}/tag-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCreateTagGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates multi tag group 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Tag group information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsCreateTagGroupAsync (Guid documentId, string authorization, TagGroupCreationData model, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsCreateTagGroupWithHttpInfoAsync(documentId, authorization, model, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates multi tag group 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="model">Tag group information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCreateTagGroupWithHttpInfoAsync (Guid documentId, string authorization, TagGroupCreationData model, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCreateTagGroup");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCreateTagGroup");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling DocumentsApi->DocumentsCreateTagGroup");

            var localVarPath = "/documents/{documentId}/tag-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCreateTagGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns information about the document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <returns>Document</returns>
        public Document DocumentsGet (Guid documentId, string authorization, bool? includeTags = default(bool?))
        {
             ApiResponse<Document> localVarResponse = DocumentsGetWithHttpInfo(documentId, authorization, includeTags);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about the document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <returns>ApiResponse of Document</returns>
        public ApiResponse<Document> DocumentsGetWithHttpInfo (Guid documentId, string authorization, bool? includeTags = default(bool?))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGet");

            var localVarPath = "/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (includeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTags", includeTags)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Document>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Document) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Document)));
        }

        /// <summary>
        /// Returns information about the document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Document</returns>
        public async System.Threading.Tasks.Task<Document> DocumentsGetAsync (Guid documentId, string authorization, bool? includeTags = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Document> localVarResponse = await DocumentsGetWithHttpInfoAsync(documentId, authorization, includeTags, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns information about the document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Document)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Document>> DocumentsGetWithHttpInfoAsync (Guid documentId, string authorization, bool? includeTags = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGet");

            var localVarPath = "/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (includeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTags", includeTags)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Document>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Document) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Document)));
        }

        /// <summary>
        /// Returns accessible stamps for a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;Stamp&gt;</returns>
        public List<Stamp> DocumentsGetAccessibleStamps (Guid documentId, string authorization)
        {
             ApiResponse<List<Stamp>> localVarResponse = DocumentsGetAccessibleStampsWithHttpInfo(documentId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns accessible stamps for a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;Stamp&gt;</returns>
        public ApiResponse<List<Stamp>> DocumentsGetAccessibleStampsWithHttpInfo (Guid documentId, string authorization)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetAccessibleStamps");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetAccessibleStamps");

            var localVarPath = "/documents/{documentId}/accessible-stamps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetAccessibleStamps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Stamp>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Stamp>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Stamp>)));
        }

        /// <summary>
        /// Returns accessible stamps for a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Stamp&gt;</returns>
        public async System.Threading.Tasks.Task<List<Stamp>> DocumentsGetAccessibleStampsAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Stamp>> localVarResponse = await DocumentsGetAccessibleStampsWithHttpInfoAsync(documentId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns accessible stamps for a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Stamp&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Stamp>>> DocumentsGetAccessibleStampsWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetAccessibleStamps");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetAccessibleStamps");

            var localVarPath = "/documents/{documentId}/accessible-stamps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetAccessibleStamps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Stamp>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Stamp>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Stamp>)));
        }

        /// <summary>
        /// Returns document search information 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>SearchInformation</returns>
        public SearchInformation DocumentsGetAdvancedSearchInformation (Guid searchId, string authorization)
        {
             ApiResponse<SearchInformation> localVarResponse = DocumentsGetAdvancedSearchInformationWithHttpInfo(searchId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns document search information 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of SearchInformation</returns>
        public ApiResponse<SearchInformation> DocumentsGetAdvancedSearchInformationWithHttpInfo (Guid searchId, string authorization)
        {
            // verify the required parameter 'searchId' is set
            if (searchId == null)
                throw new ApiException(400, "Missing required parameter 'searchId' when calling DocumentsApi->DocumentsGetAdvancedSearchInformation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetAdvancedSearchInformation");

            var localVarPath = "/documents/advanced-search/{searchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchId != null) localVarPathParams.Add("searchId", this.Configuration.ApiClient.ParameterToString(searchId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetAdvancedSearchInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SearchInformation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchInformation)));
        }

        /// <summary>
        /// Returns document search information 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SearchInformation</returns>
        public async System.Threading.Tasks.Task<SearchInformation> DocumentsGetAdvancedSearchInformationAsync (Guid searchId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SearchInformation> localVarResponse = await DocumentsGetAdvancedSearchInformationWithHttpInfoAsync(searchId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns document search information 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SearchInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchInformation>> DocumentsGetAdvancedSearchInformationWithHttpInfoAsync (Guid searchId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'searchId' is set
            if (searchId == null)
                throw new ApiException(400, "Missing required parameter 'searchId' when calling DocumentsApi->DocumentsGetAdvancedSearchInformation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetAdvancedSearchInformation");

            var localVarPath = "/documents/advanced-search/{searchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchId != null) localVarPathParams.Add("searchId", this.Configuration.ApiClient.ParameterToString(searchId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetAdvancedSearchInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SearchInformation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchInformation)));
        }

        /// <summary>
        /// Returns document search results 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>List&lt;Document&gt;</returns>
        public List<Document> DocumentsGetAdvancedSearchResults (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?))
        {
             ApiResponse<List<Document>> localVarResponse = DocumentsGetAdvancedSearchResultsWithHttpInfo(searchId, authorization, includeTags, count, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns document search results 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        public ApiResponse<List<Document>> DocumentsGetAdvancedSearchResultsWithHttpInfo (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?))
        {
            // verify the required parameter 'searchId' is set
            if (searchId == null)
                throw new ApiException(400, "Missing required parameter 'searchId' when calling DocumentsApi->DocumentsGetAdvancedSearchResults");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetAdvancedSearchResults");

            var localVarPath = "/documents/advanced-search/{searchId}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchId != null) localVarPathParams.Add("searchId", this.Configuration.ApiClient.ParameterToString(searchId)); // path parameter
            if (includeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTags", includeTags)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetAdvancedSearchResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Document>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Document>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Document>)));
        }

        /// <summary>
        /// Returns document search results 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        public async System.Threading.Tasks.Task<List<Document>> DocumentsGetAdvancedSearchResultsAsync (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Document>> localVarResponse = await DocumentsGetAdvancedSearchResultsWithHttpInfoAsync(searchId, authorization, includeTags, count, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns document search results 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Document>>> DocumentsGetAdvancedSearchResultsWithHttpInfoAsync (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'searchId' is set
            if (searchId == null)
                throw new ApiException(400, "Missing required parameter 'searchId' when calling DocumentsApi->DocumentsGetAdvancedSearchResults");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetAdvancedSearchResults");

            var localVarPath = "/documents/advanced-search/{searchId}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchId != null) localVarPathParams.Add("searchId", this.Configuration.ApiClient.ParameterToString(searchId)); // path parameter
            if (includeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTags", includeTags)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetAdvancedSearchResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Document>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Document>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Document>)));
        }

        /// <summary>
        /// Returns document annotations 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>AnnotationCollections</returns>
        public AnnotationCollections DocumentsGetAnnotations (Guid documentId, string authorization)
        {
             ApiResponse<AnnotationCollections> localVarResponse = DocumentsGetAnnotationsWithHttpInfo(documentId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns document annotations 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of AnnotationCollections</returns>
        public ApiResponse<AnnotationCollections> DocumentsGetAnnotationsWithHttpInfo (Guid documentId, string authorization)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetAnnotations");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetAnnotations");

            var localVarPath = "/documents/{documentId}/annotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationCollections>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnotationCollections) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotationCollections)));
        }

        /// <summary>
        /// Returns document annotations 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnotationCollections</returns>
        public async System.Threading.Tasks.Task<AnnotationCollections> DocumentsGetAnnotationsAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AnnotationCollections> localVarResponse = await DocumentsGetAnnotationsWithHttpInfoAsync(documentId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns document annotations 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnotationCollections)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnotationCollections>> DocumentsGetAnnotationsWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetAnnotations");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetAnnotations");

            var localVarPath = "/documents/{documentId}/annotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationCollections>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnotationCollections) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotationCollections)));
        }

        /// <summary>
        /// Returns document assignments 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>AssignmentCollections</returns>
        public AssignmentCollections DocumentsGetAssigns (Guid documentId, string authorization)
        {
             ApiResponse<AssignmentCollections> localVarResponse = DocumentsGetAssignsWithHttpInfo(documentId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns document assignments 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of AssignmentCollections</returns>
        public ApiResponse<AssignmentCollections> DocumentsGetAssignsWithHttpInfo (Guid documentId, string authorization)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetAssigns");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetAssigns");

            var localVarPath = "/documents/{documentId}/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetAssigns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssignmentCollections>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssignmentCollections) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssignmentCollections)));
        }

        /// <summary>
        /// Returns document assignments 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AssignmentCollections</returns>
        public async System.Threading.Tasks.Task<AssignmentCollections> DocumentsGetAssignsAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AssignmentCollections> localVarResponse = await DocumentsGetAssignsWithHttpInfoAsync(documentId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns document assignments 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AssignmentCollections)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssignmentCollections>> DocumentsGetAssignsWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetAssigns");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetAssigns");

            var localVarPath = "/documents/{documentId}/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetAssigns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssignmentCollections>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssignmentCollections) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssignmentCollections)));
        }

        /// <summary>
        /// Returns the document in its original format 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>Object</returns>
        public Object DocumentsGetOriginalFormat (Guid documentId, string authorization)
        {
             ApiResponse<Object> localVarResponse = DocumentsGetOriginalFormatWithHttpInfo(documentId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the document in its original format 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsGetOriginalFormatWithHttpInfo (Guid documentId, string authorization)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetOriginalFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetOriginalFormat");

            var localVarPath = "/documents/{documentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetOriginalFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the document in its original format 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsGetOriginalFormatAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsGetOriginalFormatWithHttpInfoAsync(documentId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the document in its original format 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsGetOriginalFormatWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetOriginalFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetOriginalFormat");

            var localVarPath = "/documents/{documentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetOriginalFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the document as PDF 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>Object</returns>
        public Object DocumentsGetPDFFormat (Guid documentId, string authorization)
        {
             ApiResponse<Object> localVarResponse = DocumentsGetPDFFormatWithHttpInfo(documentId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the document as PDF 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsGetPDFFormatWithHttpInfo (Guid documentId, string authorization)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetPDFFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetPDFFormat");

            var localVarPath = "/documents/{documentId}/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetPDFFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the document as PDF 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsGetPDFFormatAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsGetPDFFormatWithHttpInfoAsync(documentId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the document as PDF 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsGetPDFFormatWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetPDFFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetPDFFormat");

            var localVarPath = "/documents/{documentId}/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetPDFFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the document including any annotations as a PDF 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>Object</returns>
        public Object DocumentsGetPDFFormatWithAnnotations (Guid documentId, string authorization)
        {
             ApiResponse<Object> localVarResponse = DocumentsGetPDFFormatWithAnnotationsWithHttpInfo(documentId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the document including any annotations as a PDF 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsGetPDFFormatWithAnnotationsWithHttpInfo (Guid documentId, string authorization)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetPDFFormatWithAnnotations");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetPDFFormatWithAnnotations");

            var localVarPath = "/documents/{documentId}/annotated-pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetPDFFormatWithAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the document including any annotations as a PDF 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsGetPDFFormatWithAnnotationsAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsGetPDFFormatWithAnnotationsWithHttpInfoAsync(documentId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the document including any annotations as a PDF 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsGetPDFFormatWithAnnotationsWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetPDFFormatWithAnnotations");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetPDFFormatWithAnnotations");

            var localVarPath = "/documents/{documentId}/annotated-pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetPDFFormatWithAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns a preview of the document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="page">The desired page number (starts at 1)</param>
        /// <param name="size">The desired size of the preview image</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>Object</returns>
        public Object DocumentsGetPreviewImage (Guid documentId, int page, string size, string authorization)
        {
             ApiResponse<Object> localVarResponse = DocumentsGetPreviewImageWithHttpInfo(documentId, page, size, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a preview of the document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="page">The desired page number (starts at 1)</param>
        /// <param name="size">The desired size of the preview image</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsGetPreviewImageWithHttpInfo (Guid documentId, int page, string size, string authorization)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetPreviewImage");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling DocumentsApi->DocumentsGetPreviewImage");
            // verify the required parameter 'size' is set
            if (size == null)
                throw new ApiException(400, "Missing required parameter 'size' when calling DocumentsApi->DocumentsGetPreviewImage");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetPreviewImage");

            var localVarPath = "/documents/{documentId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetPreviewImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns a preview of the document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="page">The desired page number (starts at 1)</param>
        /// <param name="size">The desired size of the preview image</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsGetPreviewImageAsync (Guid documentId, int page, string size, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsGetPreviewImageWithHttpInfoAsync(documentId, page, size, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a preview of the document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="page">The desired page number (starts at 1)</param>
        /// <param name="size">The desired size of the preview image</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsGetPreviewImageWithHttpInfoAsync (Guid documentId, int page, string size, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetPreviewImage");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling DocumentsApi->DocumentsGetPreviewImage");
            // verify the required parameter 'size' is set
            if (size == null)
                throw new ApiException(400, "Missing required parameter 'size' when calling DocumentsApi->DocumentsGetPreviewImage");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetPreviewImage");

            var localVarPath = "/documents/{documentId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetPreviewImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns document search information 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>SearchInformation</returns>
        public SearchInformation DocumentsGetSearchInformation (Guid searchId, string authorization)
        {
             ApiResponse<SearchInformation> localVarResponse = DocumentsGetSearchInformationWithHttpInfo(searchId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns document search information 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of SearchInformation</returns>
        public ApiResponse<SearchInformation> DocumentsGetSearchInformationWithHttpInfo (Guid searchId, string authorization)
        {
            // verify the required parameter 'searchId' is set
            if (searchId == null)
                throw new ApiException(400, "Missing required parameter 'searchId' when calling DocumentsApi->DocumentsGetSearchInformation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetSearchInformation");

            var localVarPath = "/documents/search/{searchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchId != null) localVarPathParams.Add("searchId", this.Configuration.ApiClient.ParameterToString(searchId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetSearchInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SearchInformation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchInformation)));
        }

        /// <summary>
        /// Returns document search information 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SearchInformation</returns>
        public async System.Threading.Tasks.Task<SearchInformation> DocumentsGetSearchInformationAsync (Guid searchId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SearchInformation> localVarResponse = await DocumentsGetSearchInformationWithHttpInfoAsync(searchId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns document search information 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SearchInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchInformation>> DocumentsGetSearchInformationWithHttpInfoAsync (Guid searchId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'searchId' is set
            if (searchId == null)
                throw new ApiException(400, "Missing required parameter 'searchId' when calling DocumentsApi->DocumentsGetSearchInformation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetSearchInformation");

            var localVarPath = "/documents/search/{searchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchId != null) localVarPathParams.Add("searchId", this.Configuration.ApiClient.ParameterToString(searchId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetSearchInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SearchInformation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchInformation)));
        }

        /// <summary>
        /// Returns document search results 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>List&lt;Document&gt;</returns>
        public List<Document> DocumentsGetSearchResults (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?))
        {
             ApiResponse<List<Document>> localVarResponse = DocumentsGetSearchResultsWithHttpInfo(searchId, authorization, includeTags, count, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns document search results 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        public ApiResponse<List<Document>> DocumentsGetSearchResultsWithHttpInfo (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?))
        {
            // verify the required parameter 'searchId' is set
            if (searchId == null)
                throw new ApiException(400, "Missing required parameter 'searchId' when calling DocumentsApi->DocumentsGetSearchResults");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetSearchResults");

            var localVarPath = "/documents/search/{searchId}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchId != null) localVarPathParams.Add("searchId", this.Configuration.ApiClient.ParameterToString(searchId)); // path parameter
            if (includeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTags", includeTags)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetSearchResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Document>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Document>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Document>)));
        }

        /// <summary>
        /// Returns document search results 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        public async System.Threading.Tasks.Task<List<Document>> DocumentsGetSearchResultsAsync (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Document>> localVarResponse = await DocumentsGetSearchResultsWithHttpInfoAsync(searchId, authorization, includeTags, count, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns document search results 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchId">GUID of search results</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Document>>> DocumentsGetSearchResultsWithHttpInfoAsync (Guid searchId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'searchId' is set
            if (searchId == null)
                throw new ApiException(400, "Missing required parameter 'searchId' when calling DocumentsApi->DocumentsGetSearchResults");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetSearchResults");

            var localVarPath = "/documents/search/{searchId}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchId != null) localVarPathParams.Add("searchId", this.Configuration.ApiClient.ParameterToString(searchId)); // path parameter
            if (includeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTags", includeTags)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetSearchResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Document>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Document>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Document>)));
        }

        /// <summary>
        /// Returns all document tag definitions 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>TagDefinitionCollections</returns>
        public TagDefinitionCollections DocumentsGetTagDefinitions (string authorization)
        {
             ApiResponse<TagDefinitionCollections> localVarResponse = DocumentsGetTagDefinitionsWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all document tag definitions 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of TagDefinitionCollections</returns>
        public ApiResponse<TagDefinitionCollections> DocumentsGetTagDefinitionsWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetTagDefinitions");

            var localVarPath = "/documents/tag-definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetTagDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagDefinitionCollections>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TagDefinitionCollections) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagDefinitionCollections)));
        }

        /// <summary>
        /// Returns all document tag definitions 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TagDefinitionCollections</returns>
        public async System.Threading.Tasks.Task<TagDefinitionCollections> DocumentsGetTagDefinitionsAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TagDefinitionCollections> localVarResponse = await DocumentsGetTagDefinitionsWithHttpInfoAsync(authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all document tag definitions 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TagDefinitionCollections)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagDefinitionCollections>> DocumentsGetTagDefinitionsWithHttpInfoAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetTagDefinitions");

            var localVarPath = "/documents/tag-definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetTagDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagDefinitionCollections>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TagDefinitionCollections) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagDefinitionCollections)));
        }

        /// <summary>
        /// Returns document tag groups 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;TagGroup&gt;</returns>
        public List<TagGroup> DocumentsGetTagGroups (Guid documentId, string authorization)
        {
             ApiResponse<List<TagGroup>> localVarResponse = DocumentsGetTagGroupsWithHttpInfo(documentId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns document tag groups 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;TagGroup&gt;</returns>
        public ApiResponse<List<TagGroup>> DocumentsGetTagGroupsWithHttpInfo (Guid documentId, string authorization)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetTagGroups");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetTagGroups");

            var localVarPath = "/documents/{documentId}/tag-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetTagGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TagGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TagGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TagGroup>)));
        }

        /// <summary>
        /// Returns document tag groups 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TagGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<TagGroup>> DocumentsGetTagGroupsAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TagGroup>> localVarResponse = await DocumentsGetTagGroupsWithHttpInfoAsync(documentId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns document tag groups 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TagGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TagGroup>>> DocumentsGetTagGroupsWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetTagGroups");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetTagGroups");

            var localVarPath = "/documents/{documentId}/tag-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetTagGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TagGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TagGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TagGroup>)));
        }

        /// <summary>
        /// Returns document tags 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>TagCollections</returns>
        public TagCollections DocumentsGetTags (Guid documentId, string authorization)
        {
             ApiResponse<TagCollections> localVarResponse = DocumentsGetTagsWithHttpInfo(documentId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns document tags 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of TagCollections</returns>
        public ApiResponse<TagCollections> DocumentsGetTagsWithHttpInfo (Guid documentId, string authorization)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetTags");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetTags");

            var localVarPath = "/documents/{documentId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagCollections>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TagCollections) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagCollections)));
        }

        /// <summary>
        /// Returns document tags 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TagCollections</returns>
        public async System.Threading.Tasks.Task<TagCollections> DocumentsGetTagsAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TagCollections> localVarResponse = await DocumentsGetTagsWithHttpInfoAsync(documentId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns document tags 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TagCollections)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagCollections>> DocumentsGetTagsWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsGetTags");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsGetTags");

            var localVarPath = "/documents/{documentId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagCollections>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TagCollections) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagCollections)));
        }

        /// <summary>
        /// Initializes document search for the given search condition and saves results on the server. These results are available for 2 hours from the last access 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <returns>Object</returns>
        public Object DocumentsInitAdvancedSearch (string authorization, AdvancedDocumentSearchFilter filter)
        {
             ApiResponse<Object> localVarResponse = DocumentsInitAdvancedSearchWithHttpInfo(authorization, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initializes document search for the given search condition and saves results on the server. These results are available for 2 hours from the last access 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsInitAdvancedSearchWithHttpInfo (string authorization, AdvancedDocumentSearchFilter filter)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsInitAdvancedSearch");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DocumentsApi->DocumentsInitAdvancedSearch");

            var localVarPath = "/documents/advanced-search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsInitAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Initializes document search for the given search condition and saves results on the server. These results are available for 2 hours from the last access 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsInitAdvancedSearchAsync (string authorization, AdvancedDocumentSearchFilter filter, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsInitAdvancedSearchWithHttpInfoAsync(authorization, filter, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initializes document search for the given search condition and saves results on the server. These results are available for 2 hours from the last access 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsInitAdvancedSearchWithHttpInfoAsync (string authorization, AdvancedDocumentSearchFilter filter, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsInitAdvancedSearch");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DocumentsApi->DocumentsInitAdvancedSearch");

            var localVarPath = "/documents/advanced-search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsInitAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Initializes document search for the given search string and saves results on the server. These results are available for 2 hours from the last access 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <returns>Object</returns>
        public Object DocumentsInitSearch (string authorization, DocumentSearchFilter filter)
        {
             ApiResponse<Object> localVarResponse = DocumentsInitSearchWithHttpInfo(authorization, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initializes document search for the given search string and saves results on the server. These results are available for 2 hours from the last access 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsInitSearchWithHttpInfo (string authorization, DocumentSearchFilter filter)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsInitSearch");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DocumentsApi->DocumentsInitSearch");

            var localVarPath = "/documents/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsInitSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Initializes document search for the given search string and saves results on the server. These results are available for 2 hours from the last access 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsInitSearchAsync (string authorization, DocumentSearchFilter filter, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsInitSearchWithHttpInfoAsync(authorization, filter, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initializes document search for the given search string and saves results on the server. These results are available for 2 hours from the last access 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="filter">Filter information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsInitSearchWithHttpInfoAsync (string authorization, DocumentSearchFilter filter, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsInitSearch");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling DocumentsApi->DocumentsInitSearch");

            var localVarPath = "/documents/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsInitSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Sets file content 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <param name="amagnoFileCreateDate">File create UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <param name="amagnoFileChangeDate">Last file change UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <returns>Object</returns>
        // public Object DocumentsPutStream (Guid documentId, string authorization, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string amagnoFileCreateDate = default(string), string amagnoFileChangeDate = default(string))
        // {
        //      ApiResponse<Object> localVarResponse = DocumentsPutStreamWithHttpInfo(documentId, authorization, UNKNOWN_BASE_TYPE, amagnoFileCreateDate, amagnoFileChangeDate);
        //      return localVarResponse.Data;
        // }

        /// <summary>
        /// Sets file content 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <param name="amagnoFileCreateDate">File create UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <param name="amagnoFileChangeDate">Last file change UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        // public ApiResponse<Object> DocumentsPutStreamWithHttpInfo (Guid documentId, string authorization, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string amagnoFileCreateDate = default(string), string amagnoFileChangeDate = default(string))
        // {
        //     // verify the required parameter 'documentId' is set
        //     if (documentId == null)
        //         throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsPutStream");
        //     // verify the required parameter 'authorization' is set
        //     if (authorization == null)
        //         throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsPutStream");
        //     // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
        //     if (UNKNOWN_BASE_TYPE == null)
        //         throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling DocumentsApi->DocumentsPutStream");
        //
        //     var localVarPath = "/documents/{documentId}/file";
        //     var localVarPathParams = new Dictionary<String, String>();
        //     var localVarQueryParams = new List<KeyValuePair<String, String>>();
        //     var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
        //     var localVarFormParams = new Dictionary<String, String>();
        //     var localVarFileParams = new Dictionary<String, FileParameter>();
        //     Object localVarPostBody = null;
        //
        //     // to determine the Content-Type header
        //     String[] localVarHttpContentTypes = new String[] {
        //         "application/form-data"
        //     };
        //     String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
        //
        //     // to determine the Accept header
        //     String[] localVarHttpHeaderAccepts = new String[] {
        //         "application/json",
        //         "text/json",
        //         "text/html",
        //         "application/xml",
        //         "text/xml"
        //     };
        //     String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        //     if (localVarHttpHeaderAccept != null)
        //         localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        //
        //     if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
        //     if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
        //     if (amagnoFileCreateDate != null) localVarHeaderParams.Add("Amagno-File-Create-Date", this.Configuration.ApiClient.ParameterToString(amagnoFileCreateDate)); // header parameter
        //     if (amagnoFileChangeDate != null) localVarHeaderParams.Add("Amagno-File-Change-Date", this.Configuration.ApiClient.ParameterToString(amagnoFileChangeDate)); // header parameter
        //     if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
        //     {
        //         localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
        //     }
        //     else
        //     {
        //         localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
        //     }
        //
        //
        //     // make the HTTP request
        //     IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
        //         Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
        //         localVarPathParams, localVarHttpContentType);
        //
        //     int localVarStatusCode = (int) localVarResponse.StatusCode;
        //
        //     if (ExceptionFactory != null)
        //     {
        //         Exception exception = ExceptionFactory("DocumentsPutStream", localVarResponse);
        //         if (exception != null) throw exception;
        //     }
        //
        //     return new ApiResponse<Object>(localVarStatusCode,
        //         localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
        //         (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        // }

        /// <summary>
        /// Sets file content 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <param name="amagnoFileCreateDate">File create UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <param name="amagnoFileChangeDate">Last file change UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        // public async System.Threading.Tasks.Task<Object> DocumentsPutStreamAsync (Guid documentId, string authorization, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string amagnoFileCreateDate = default(string), string amagnoFileChangeDate = default(string), CancellationToken cancellationToken = default(CancellationToken))
        // {
        //      ApiResponse<Object> localVarResponse = await DocumentsPutStreamWithHttpInfoAsync(documentId, authorization, UNKNOWN_BASE_TYPE, amagnoFileCreateDate, amagnoFileChangeDate, cancellationToken);
        //      return localVarResponse.Data;
        //
        // }

        /// <summary>
        /// Sets file content 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <param name="amagnoFileCreateDate">File create UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <param name="amagnoFileChangeDate">Last file change UTC in ISO 8601 format. Required if the document already has a file (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        // public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsPutStreamWithHttpInfoAsync (Guid documentId, string authorization, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string amagnoFileCreateDate = default(string), string amagnoFileChangeDate = default(string), CancellationToken cancellationToken = default(CancellationToken))
        // {
        //     // verify the required parameter 'documentId' is set
        //     if (documentId == null)
        //         throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsPutStream");
        //     // verify the required parameter 'authorization' is set
        //     if (authorization == null)
        //         throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsPutStream");
        //     // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
        //     if (UNKNOWN_BASE_TYPE == null)
        //         throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling DocumentsApi->DocumentsPutStream");
        //
        //     var localVarPath = "/documents/{documentId}/file";
        //     var localVarPathParams = new Dictionary<String, String>();
        //     var localVarQueryParams = new List<KeyValuePair<String, String>>();
        //     var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
        //     var localVarFormParams = new Dictionary<String, String>();
        //     var localVarFileParams = new Dictionary<String, FileParameter>();
        //     Object localVarPostBody = null;
        //
        //     // to determine the Content-Type header
        //     String[] localVarHttpContentTypes = new String[] {
        //         "application/form-data"
        //     };
        //     String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
        //
        //     // to determine the Accept header
        //     String[] localVarHttpHeaderAccepts = new String[] {
        //         "application/json",
        //         "text/json",
        //         "text/html",
        //         "application/xml",
        //         "text/xml"
        //     };
        //     String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        //     if (localVarHttpHeaderAccept != null)
        //         localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        //
        //     if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
        //     if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
        //     if (amagnoFileCreateDate != null) localVarHeaderParams.Add("Amagno-File-Create-Date", this.Configuration.ApiClient.ParameterToString(amagnoFileCreateDate)); // header parameter
        //     if (amagnoFileChangeDate != null) localVarHeaderParams.Add("Amagno-File-Change-Date", this.Configuration.ApiClient.ParameterToString(amagnoFileChangeDate)); // header parameter
        //     if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
        //     {
        //         localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
        //     }
        //     else
        //     {
        //         localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
        //     }
        //
        //
        //     // make the HTTP request
        //     IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
        //         Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
        //         localVarPathParams, localVarHttpContentType, cancellationToken);
        //
        //     int localVarStatusCode = (int) localVarResponse.StatusCode;
        //
        //     if (ExceptionFactory != null)
        //     {
        //         Exception exception = ExceptionFactory("DocumentsPutStream", localVarResponse);
        //         if (exception != null) throw exception;
        //     }
        //
        //     return new ApiResponse<Object>(localVarStatusCode,
        //         localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
        //         (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        // }

        /// <summary>
        /// Stamps a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="stampingData">Stamp parameters</param>
        /// <returns>Object</returns>
        public Object DocumentsStampDocument (Guid documentId, string authorization, StampingData stampingData)
        {
             ApiResponse<Object> localVarResponse = DocumentsStampDocumentWithHttpInfo(documentId, authorization, stampingData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stamps a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="stampingData">Stamp parameters</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsStampDocumentWithHttpInfo (Guid documentId, string authorization, StampingData stampingData)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsStampDocument");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsStampDocument");
            // verify the required parameter 'stampingData' is set
            if (stampingData == null)
                throw new ApiException(400, "Missing required parameter 'stampingData' when calling DocumentsApi->DocumentsStampDocument");

            var localVarPath = "/documents/{documentId}/stamp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (stampingData != null && stampingData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stampingData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stampingData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsStampDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Stamps a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="stampingData">Stamp parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsStampDocumentAsync (Guid documentId, string authorization, StampingData stampingData, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsStampDocumentWithHttpInfoAsync(documentId, authorization, stampingData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stamps a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="stampingData">Stamp parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsStampDocumentWithHttpInfoAsync (Guid documentId, string authorization, StampingData stampingData, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsStampDocument");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsStampDocument");
            // verify the required parameter 'stampingData' is set
            if (stampingData == null)
                throw new ApiException(400, "Missing required parameter 'stampingData' when calling DocumentsApi->DocumentsStampDocument");

            var localVarPath = "/documents/{documentId}/stamp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (stampingData != null && stampingData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stampingData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stampingData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsStampDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Throws the selected document into the trash 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>Object</returns>
        public Object DocumentsTrash (Guid documentId, string authorization)
        {
             ApiResponse<Object> localVarResponse = DocumentsTrashWithHttpInfo(documentId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Throws the selected document into the trash 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsTrashWithHttpInfo (Guid documentId, string authorization)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsTrash");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsTrash");

            var localVarPath = "/documents/{documentId}/trash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTrash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Throws the selected document into the trash 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsTrashAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsTrashWithHttpInfoAsync(documentId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Throws the selected document into the trash 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsTrashWithHttpInfoAsync (Guid documentId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsTrash");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsTrash");

            var localVarPath = "/documents/{documentId}/trash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTrash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Updates a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="data">Document data</param>
        /// <returns>Object</returns>
        public Object DocumentsUpdate (Guid documentId, string authorization, DocumentUpdateData data)
        {
             ApiResponse<Object> localVarResponse = DocumentsUpdateWithHttpInfo(documentId, authorization, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="data">Document data</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DocumentsUpdateWithHttpInfo (Guid documentId, string authorization, DocumentUpdateData data)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsUpdate");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DocumentsApi->DocumentsUpdate");

            var localVarPath = "/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Updates a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="data">Document data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DocumentsUpdateAsync (Guid documentId, string authorization, DocumentUpdateData data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DocumentsUpdateWithHttpInfoAsync(documentId, authorization, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">GUID of the document</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="data">Document data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsUpdateWithHttpInfoAsync (Guid documentId, string authorization, DocumentUpdateData data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsUpdate");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DocumentsApi->DocumentsUpdate");

            var localVarPath = "/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}

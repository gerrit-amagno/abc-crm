/* 
 * AMAGNO HTTP/REST API Version 2
 *
 * <span>Use your own or the cloud version of AMAGNO with REST/JSON!</span>  <br /><br />  <b>General</b>  <br /><br />  <span>      The AMAGNO API uses the HTTP methods GET and POST to communicate with the service. This mechanism is often called REST. It returns either JSON for informations or direct stream with the actual content type for files. A simple response looks like this:  </span>  <code>      {      \"id\": \"61776573-6f6d-6520-6578-616d706c6521\",      \"name\": \"Document.pdf\"      }  </code>  <span>      If your AMAGNO server has the name \"myserver\", the URL to the AMAGNO API would be \"https://myserver/amagnome/api/v2/\".<br />      For this individual URL we will use the term <b>BASEURL</b> in the further documentation.  </span>  <br /><br />  <b>Authentication</b>  <br /><br />  <span>      API requests are only allowed by authenticated users. To authenticate users the AMAGNO API uses <a href=\"https://tools.ietf.org/html/rfc7519\">JSON Web Token</a>.      To receive this token a POST-request to https://myserver/amagnome/api/v2/token with credentials in body should be sent. Request example:  </span>  <code>      curl -X POST - -header 'Content-Type: application/json' - -header 'Accept: application/json' -d '{      \"userName\": \"user@company.com\",      \"password\": \"password\"      }' 'http://myserver/amagnome/api/v2/token'  </code>  <span>      If the data that is sent is correct, a response will be returned including HTTP status code \"200\" and the token within the body. To make other API requests this token should be sent in the HTTP header with the name \"Authorization\"      and the value \"Bearer {token}\". The expiration time is defined in the configuration (web.config of AmagnoRestApi2, AppSettings, Key \"JwtExpirationInMinutes\").  </span><br /><br />  <b>Security</b>  <br /><br />  <span>Only use the API via HTTPS and always make sure to validate the certificate on the client side.</span>  <br /><br />  <b>Request Example</b>  <br /><br />  <span>https://myserver/amagnome/api/v2/vaults with HTTP header \"Authorization\": \"Bearer token\"</span>  <br /><br />  <b>HTTP response codes</b>  <br />  <table>      <tbody>      <tr>          <td>              <p><span>Code</span></p>          </td>          <td>              <p><span>Description</span></p>          </td>      </tr>      <tr>          <td>              <p>2xx</p>          </td>          <td>              <p>The request was successful.</p>          </td>      </tr>      <tr>          <td>              <p>4xx</p>          </td>          <td>              <p>The request was not successful. Change the request to make it work.</p>          </td>      </tr>      <tr>          <td>              <p>5xx</p>          </td>          <td>              <p>An error occurred on the server side. Please try again.</p>          </td>      </tr>      </tbody>  </table>  <code></code>  <br />  <b>Unsuccessful request details</b>  <br /><br />        <span>            For responses with http status codes 400, 403 or 500, there are also error codes and messages in JSON format in the body of the response sent. For example:        </span>  <code>      {      \"code\": 2010,      \"message\": \"Document with same file exists in vault\"      }  </code>  <span>      \"code\" is an error identifier and \"message\" presents a 'human-friendly' phrase. When responses are sent by the IIS (Internet Information Service), this information is not displayed.  </span>  <br /><br />  <b>GUIDs</b>  <br /><br />  <span>      The AMAGNO API works mainly with worldwide unique identification numbers to address elements like vaults, magnets, documents amongst other things - known as GUID.<br />      Many requests will return element GUIDs.<br />      If you want to address a specific element in your AMAGNO, e.g.: a vault; you can find out the corresponding element's GUID. In order to do this, please log in to your AMAGNO Client for Windows and activate the Developer Mode in the Help Menu of your User Profile. For more information, please consult the AMAGNO User Manual.  </span>  <br /><br />  
 *
 * The version of the OpenAPI document: v2
 * Contact: support@amagno.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using AmagnoWebApi.Client.Client;
using AmagnoWebApi.Client.Model;

namespace AmagnoWebApi.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVaultsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Starts membership of a user in a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">Vault member data</param>
        /// <returns>Object</returns>
        Object VaultsAddMember (Guid vaultId, string authorization, VaultMemberCreationData creationData);

        /// <summary>
        /// Starts membership of a user in a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">Vault member data</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> VaultsAddMemberWithHttpInfo (Guid vaultId, string authorization, VaultMemberCreationData creationData);
        /// <summary>
        /// Create a new user group in a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">User group data</param>
        /// <returns>Object</returns>
        Object VaultsAddUserGroup (Guid vaultId, string authorization, UserGroupCreationData creationData);

        /// <summary>
        /// Create a new user group in a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">User group data</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> VaultsAddUserGroupWithHttpInfo (Guid vaultId, string authorization, UserGroupCreationData creationData);
        /// <summary>
        /// Copies a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCopyData"></param>
        /// <returns>Object</returns>
        Object VaultsCopyVault (Guid vaultId, string authorization, VaultCopyData vaultCopyData);

        /// <summary>
        /// Copies a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCopyData"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> VaultsCopyVaultWithHttpInfo (Guid vaultId, string authorization, VaultCopyData vaultCopyData);
        /// <summary>
        /// Creates a magnet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="magnetCreationData"></param>
        /// <returns>Object</returns>
        Object VaultsCreateMagnet (Guid vaultId, string authorization, MagnetCreationData magnetCreationData);

        /// <summary>
        /// Creates a magnet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="magnetCreationData"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> VaultsCreateMagnetWithHttpInfo (Guid vaultId, string authorization, MagnetCreationData magnetCreationData);
        /// <summary>
        /// Creates a new vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCreationData"></param>
        /// <returns>Object</returns>
        Object VaultsCreateVault (string authorization, VaultCreationData vaultCreationData);

        /// <summary>
        /// Creates a new vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCreationData"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> VaultsCreateVaultWithHttpInfo (string authorization, VaultCreationData vaultCreationData);
        /// <summary>
        /// Returns all checked-out documents in the vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <returns>List&lt;Document&gt;</returns>
        List<Document> VaultsGetCheckedOutDocuments (Guid vaultId, string authorization, bool? includeTags = default(bool?));

        /// <summary>
        /// Returns all checked-out documents in the vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        ApiResponse<List<Document>> VaultsGetCheckedOutDocumentsWithHttpInfo (Guid vaultId, string authorization, bool? includeTags = default(bool?));
        /// <summary>
        /// Returns all of the vault&#39;s document tag definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>TagDefinitionCollections</returns>
        TagDefinitionCollections VaultsGetDocumentTagDefinitions (Guid vaultId, string authorization);

        /// <summary>
        /// Returns all of the vault&#39;s document tag definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of TagDefinitionCollections</returns>
        ApiResponse<TagDefinitionCollections> VaultsGetDocumentTagDefinitionsWithHttpInfo (Guid vaultId, string authorization);
        /// <summary>
        /// Returns all of the vault&#39;s document tag group definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;TagGroupDefinition&gt;</returns>
        List<TagGroupDefinition> VaultsGetDocumentTagGroupDefinitions (Guid vaultId, string authorization);

        /// <summary>
        /// Returns all of the vault&#39;s document tag group definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;TagGroupDefinition&gt;</returns>
        ApiResponse<List<TagGroupDefinition>> VaultsGetDocumentTagGroupDefinitionsWithHttpInfo (Guid vaultId, string authorization);
        /// <summary>
        /// Returns all of the vault&#39;s document type categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;DocumentTypeCategory&gt;</returns>
        List<DocumentTypeCategory> VaultsGetDocumentTypeCategories (Guid vaultId, string authorization);

        /// <summary>
        /// Returns all of the vault&#39;s document type categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeCategory&gt;</returns>
        ApiResponse<List<DocumentTypeCategory>> VaultsGetDocumentTypeCategoriesWithHttpInfo (Guid vaultId, string authorization);
        /// <summary>
        /// Returns all documents in the vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>List&lt;Document&gt;</returns>
        List<Document> VaultsGetDocuments (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?));

        /// <summary>
        /// Returns all documents in the vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        ApiResponse<List<Document>> VaultsGetDocumentsWithHttpInfo (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?));
        /// <summary>
        /// Returns all of the vault&#39;s magnets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;Magnet&gt;</returns>
        List<Magnet> VaultsGetMagnets (Guid vaultId, string authorization);

        /// <summary>
        /// Returns all of the vault&#39;s magnets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;Magnet&gt;</returns>
        ApiResponse<List<Magnet>> VaultsGetMagnetsWithHttpInfo (Guid vaultId, string authorization);
        /// <summary>
        /// Returns all of the vault&#39;s members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;VaultMember&gt;</returns>
        List<VaultMember> VaultsGetMembers (Guid vaultId, string authorization);

        /// <summary>
        /// Returns all of the vault&#39;s members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;VaultMember&gt;</returns>
        ApiResponse<List<VaultMember>> VaultsGetMembersWithHttpInfo (Guid vaultId, string authorization);
        /// <summary>
        /// Returns stamps of a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;Stamp&gt;</returns>
        List<Stamp> VaultsGetStamps (Guid vaultId, string authorization);

        /// <summary>
        /// Returns stamps of a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;Stamp&gt;</returns>
        ApiResponse<List<Stamp>> VaultsGetStampsWithHttpInfo (Guid vaultId, string authorization);
        /// <summary>
        /// Returns information about all documents that are in the recycle bin of the vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>List&lt;Document&gt;</returns>
        List<Document> VaultsGetTrashedDocuments (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?));

        /// <summary>
        /// Returns information about all documents that are in the recycle bin of the vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        ApiResponse<List<Document>> VaultsGetTrashedDocumentsWithHttpInfo (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?));
        /// <summary>
        /// Returns user groups of a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;UserGroup&gt;</returns>
        List<UserGroup> VaultsGetUserGroups (Guid vaultId, string authorization);

        /// <summary>
        /// Returns user groups of a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;UserGroup&gt;</returns>
        ApiResponse<List<UserGroup>> VaultsGetUserGroupsWithHttpInfo (Guid vaultId, string authorization);
        /// <summary>
        /// Returns the requested vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>Vault</returns>
        Vault VaultsGetVault (Guid vaultId, string authorization);

        /// <summary>
        /// Returns the requested vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of Vault</returns>
        ApiResponse<Vault> VaultsGetVaultWithHttpInfo (Guid vaultId, string authorization);
        /// <summary>
        /// Returns all of the user&#39;s vaults
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;Vault&gt;</returns>
        List<Vault> VaultsGetVaults (string authorization);

        /// <summary>
        /// Returns all of the user&#39;s vaults
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;Vault&gt;</returns>
        ApiResponse<List<Vault>> VaultsGetVaultsWithHttpInfo (string authorization);
        /// <summary>
        /// Creates a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="document">Model of the new document</param>
        /// <returns>Object</returns>
        Object VaultsPostDocument (Guid vaultId, string authorization, NewDocument document);

        /// <summary>
        /// Creates a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="document">Model of the new document</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> VaultsPostDocumentWithHttpInfo (Guid vaultId, string authorization, NewDocument document);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Starts membership of a user in a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">Vault member data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> VaultsAddMemberAsync (Guid vaultId, string authorization, VaultMemberCreationData creationData, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Starts membership of a user in a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">Vault member data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VaultsAddMemberWithHttpInfoAsync (Guid vaultId, string authorization, VaultMemberCreationData creationData, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new user group in a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">User group data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> VaultsAddUserGroupAsync (Guid vaultId, string authorization, UserGroupCreationData creationData, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new user group in a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">User group data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VaultsAddUserGroupWithHttpInfoAsync (Guid vaultId, string authorization, UserGroupCreationData creationData, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Copies a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCopyData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> VaultsCopyVaultAsync (Guid vaultId, string authorization, VaultCopyData vaultCopyData, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Copies a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCopyData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VaultsCopyVaultWithHttpInfoAsync (Guid vaultId, string authorization, VaultCopyData vaultCopyData, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a magnet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="magnetCreationData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> VaultsCreateMagnetAsync (Guid vaultId, string authorization, MagnetCreationData magnetCreationData, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a magnet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="magnetCreationData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VaultsCreateMagnetWithHttpInfoAsync (Guid vaultId, string authorization, MagnetCreationData magnetCreationData, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a new vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCreationData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> VaultsCreateVaultAsync (string authorization, VaultCreationData vaultCreationData, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCreationData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VaultsCreateVaultWithHttpInfoAsync (string authorization, VaultCreationData vaultCreationData, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all checked-out documents in the vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        System.Threading.Tasks.Task<List<Document>> VaultsGetCheckedOutDocumentsAsync (Guid vaultId, string authorization, bool? includeTags = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all checked-out documents in the vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Document>>> VaultsGetCheckedOutDocumentsWithHttpInfoAsync (Guid vaultId, string authorization, bool? includeTags = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all of the vault&#39;s document tag definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TagDefinitionCollections</returns>
        System.Threading.Tasks.Task<TagDefinitionCollections> VaultsGetDocumentTagDefinitionsAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all of the vault&#39;s document tag definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TagDefinitionCollections)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagDefinitionCollections>> VaultsGetDocumentTagDefinitionsWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all of the vault&#39;s document tag group definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TagGroupDefinition&gt;</returns>
        System.Threading.Tasks.Task<List<TagGroupDefinition>> VaultsGetDocumentTagGroupDefinitionsAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all of the vault&#39;s document tag group definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TagGroupDefinition&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TagGroupDefinition>>> VaultsGetDocumentTagGroupDefinitionsWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all of the vault&#39;s document type categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentTypeCategory&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentTypeCategory>> VaultsGetDocumentTypeCategoriesAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all of the vault&#39;s document type categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeCategory>>> VaultsGetDocumentTypeCategoriesWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all documents in the vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        System.Threading.Tasks.Task<List<Document>> VaultsGetDocumentsAsync (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all documents in the vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Document>>> VaultsGetDocumentsWithHttpInfoAsync (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all of the vault&#39;s magnets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Magnet&gt;</returns>
        System.Threading.Tasks.Task<List<Magnet>> VaultsGetMagnetsAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all of the vault&#39;s magnets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Magnet&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Magnet>>> VaultsGetMagnetsWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all of the vault&#39;s members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;VaultMember&gt;</returns>
        System.Threading.Tasks.Task<List<VaultMember>> VaultsGetMembersAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all of the vault&#39;s members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;VaultMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VaultMember>>> VaultsGetMembersWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns stamps of a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Stamp&gt;</returns>
        System.Threading.Tasks.Task<List<Stamp>> VaultsGetStampsAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns stamps of a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Stamp&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Stamp>>> VaultsGetStampsWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns information about all documents that are in the recycle bin of the vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        System.Threading.Tasks.Task<List<Document>> VaultsGetTrashedDocumentsAsync (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns information about all documents that are in the recycle bin of the vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Document>>> VaultsGetTrashedDocumentsWithHttpInfoAsync (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns user groups of a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;UserGroup&gt;</returns>
        System.Threading.Tasks.Task<List<UserGroup>> VaultsGetUserGroupsAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns user groups of a vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UserGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserGroup>>> VaultsGetUserGroupsWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the requested vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Vault</returns>
        System.Threading.Tasks.Task<Vault> VaultsGetVaultAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the requested vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Vault)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vault>> VaultsGetVaultWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all of the user&#39;s vaults
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Vault&gt;</returns>
        System.Threading.Tasks.Task<List<Vault>> VaultsGetVaultsAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all of the user&#39;s vaults
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Vault&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Vault>>> VaultsGetVaultsWithHttpInfoAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="document">Model of the new document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> VaultsPostDocumentAsync (Guid vaultId, string authorization, NewDocument document, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="document">Model of the new document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VaultsPostDocumentWithHttpInfoAsync (Guid vaultId, string authorization, NewDocument document, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VaultsApi : IVaultsApi
    {
        private AmagnoWebApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VaultsApi(String basePath)
        {
            this.Configuration = new AmagnoWebApi.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AmagnoWebApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultsApi"/> class
        /// </summary>
        /// <returns></returns>
        public VaultsApi()
        {
            this.Configuration = AmagnoWebApi.Client.Client.Configuration.Default;

            ExceptionFactory = AmagnoWebApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VaultsApi(AmagnoWebApi.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AmagnoWebApi.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AmagnoWebApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AmagnoWebApi.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AmagnoWebApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Starts membership of a user in a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">Vault member data</param>
        /// <returns>Object</returns>
        public Object VaultsAddMember (Guid vaultId, string authorization, VaultMemberCreationData creationData)
        {
             ApiResponse<Object> localVarResponse = VaultsAddMemberWithHttpInfo(vaultId, authorization, creationData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Starts membership of a user in a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">Vault member data</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> VaultsAddMemberWithHttpInfo (Guid vaultId, string authorization, VaultMemberCreationData creationData)
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsAddMember");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsAddMember");
            // verify the required parameter 'creationData' is set
            if (creationData == null)
                throw new ApiException(400, "Missing required parameter 'creationData' when calling VaultsApi->VaultsAddMember");

            var localVarPath = "/vaults/{vaultId}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (creationData != null && creationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(creationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = creationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsAddMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Starts membership of a user in a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">Vault member data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> VaultsAddMemberAsync (Guid vaultId, string authorization, VaultMemberCreationData creationData, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await VaultsAddMemberWithHttpInfoAsync(vaultId, authorization, creationData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Starts membership of a user in a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">Vault member data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VaultsAddMemberWithHttpInfoAsync (Guid vaultId, string authorization, VaultMemberCreationData creationData, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsAddMember");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsAddMember");
            // verify the required parameter 'creationData' is set
            if (creationData == null)
                throw new ApiException(400, "Missing required parameter 'creationData' when calling VaultsApi->VaultsAddMember");

            var localVarPath = "/vaults/{vaultId}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (creationData != null && creationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(creationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = creationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsAddMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create a new user group in a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">User group data</param>
        /// <returns>Object</returns>
        public Object VaultsAddUserGroup (Guid vaultId, string authorization, UserGroupCreationData creationData)
        {
             ApiResponse<Object> localVarResponse = VaultsAddUserGroupWithHttpInfo(vaultId, authorization, creationData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new user group in a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">User group data</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> VaultsAddUserGroupWithHttpInfo (Guid vaultId, string authorization, UserGroupCreationData creationData)
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsAddUserGroup");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsAddUserGroup");
            // verify the required parameter 'creationData' is set
            if (creationData == null)
                throw new ApiException(400, "Missing required parameter 'creationData' when calling VaultsApi->VaultsAddUserGroup");

            var localVarPath = "/vaults/{vaultId}/user-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (creationData != null && creationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(creationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = creationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsAddUserGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create a new user group in a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">User group data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> VaultsAddUserGroupAsync (Guid vaultId, string authorization, UserGroupCreationData creationData, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await VaultsAddUserGroupWithHttpInfoAsync(vaultId, authorization, creationData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new user group in a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="creationData">User group data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VaultsAddUserGroupWithHttpInfoAsync (Guid vaultId, string authorization, UserGroupCreationData creationData, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsAddUserGroup");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsAddUserGroup");
            // verify the required parameter 'creationData' is set
            if (creationData == null)
                throw new ApiException(400, "Missing required parameter 'creationData' when calling VaultsApi->VaultsAddUserGroup");

            var localVarPath = "/vaults/{vaultId}/user-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (creationData != null && creationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(creationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = creationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsAddUserGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Copies a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCopyData"></param>
        /// <returns>Object</returns>
        public Object VaultsCopyVault (Guid vaultId, string authorization, VaultCopyData vaultCopyData)
        {
             ApiResponse<Object> localVarResponse = VaultsCopyVaultWithHttpInfo(vaultId, authorization, vaultCopyData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copies a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCopyData"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> VaultsCopyVaultWithHttpInfo (Guid vaultId, string authorization, VaultCopyData vaultCopyData)
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsCopyVault");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsCopyVault");
            // verify the required parameter 'vaultCopyData' is set
            if (vaultCopyData == null)
                throw new ApiException(400, "Missing required parameter 'vaultCopyData' when calling VaultsApi->VaultsCopyVault");

            var localVarPath = "/vaults/{vaultId}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (vaultCopyData != null && vaultCopyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vaultCopyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vaultCopyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsCopyVault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Copies a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCopyData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> VaultsCopyVaultAsync (Guid vaultId, string authorization, VaultCopyData vaultCopyData, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await VaultsCopyVaultWithHttpInfoAsync(vaultId, authorization, vaultCopyData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copies a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCopyData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VaultsCopyVaultWithHttpInfoAsync (Guid vaultId, string authorization, VaultCopyData vaultCopyData, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsCopyVault");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsCopyVault");
            // verify the required parameter 'vaultCopyData' is set
            if (vaultCopyData == null)
                throw new ApiException(400, "Missing required parameter 'vaultCopyData' when calling VaultsApi->VaultsCopyVault");

            var localVarPath = "/vaults/{vaultId}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (vaultCopyData != null && vaultCopyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vaultCopyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vaultCopyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsCopyVault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates a magnet 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="magnetCreationData"></param>
        /// <returns>Object</returns>
        public Object VaultsCreateMagnet (Guid vaultId, string authorization, MagnetCreationData magnetCreationData)
        {
             ApiResponse<Object> localVarResponse = VaultsCreateMagnetWithHttpInfo(vaultId, authorization, magnetCreationData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a magnet 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="magnetCreationData"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> VaultsCreateMagnetWithHttpInfo (Guid vaultId, string authorization, MagnetCreationData magnetCreationData)
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsCreateMagnet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsCreateMagnet");
            // verify the required parameter 'magnetCreationData' is set
            if (magnetCreationData == null)
                throw new ApiException(400, "Missing required parameter 'magnetCreationData' when calling VaultsApi->VaultsCreateMagnet");

            var localVarPath = "/vaults/{vaultId}/magnets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (magnetCreationData != null && magnetCreationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(magnetCreationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = magnetCreationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsCreateMagnet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates a magnet 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="magnetCreationData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> VaultsCreateMagnetAsync (Guid vaultId, string authorization, MagnetCreationData magnetCreationData, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await VaultsCreateMagnetWithHttpInfoAsync(vaultId, authorization, magnetCreationData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a magnet 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId"></param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="magnetCreationData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VaultsCreateMagnetWithHttpInfoAsync (Guid vaultId, string authorization, MagnetCreationData magnetCreationData, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsCreateMagnet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsCreateMagnet");
            // verify the required parameter 'magnetCreationData' is set
            if (magnetCreationData == null)
                throw new ApiException(400, "Missing required parameter 'magnetCreationData' when calling VaultsApi->VaultsCreateMagnet");

            var localVarPath = "/vaults/{vaultId}/magnets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (magnetCreationData != null && magnetCreationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(magnetCreationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = magnetCreationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsCreateMagnet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates a new vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCreationData"></param>
        /// <returns>Object</returns>
        public Object VaultsCreateVault (string authorization, VaultCreationData vaultCreationData)
        {
             ApiResponse<Object> localVarResponse = VaultsCreateVaultWithHttpInfo(authorization, vaultCreationData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCreationData"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> VaultsCreateVaultWithHttpInfo (string authorization, VaultCreationData vaultCreationData)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsCreateVault");
            // verify the required parameter 'vaultCreationData' is set
            if (vaultCreationData == null)
                throw new ApiException(400, "Missing required parameter 'vaultCreationData' when calling VaultsApi->VaultsCreateVault");

            var localVarPath = "/vaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (vaultCreationData != null && vaultCreationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vaultCreationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vaultCreationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsCreateVault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates a new vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCreationData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> VaultsCreateVaultAsync (string authorization, VaultCreationData vaultCreationData, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await VaultsCreateVaultWithHttpInfoAsync(authorization, vaultCreationData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="vaultCreationData"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VaultsCreateVaultWithHttpInfoAsync (string authorization, VaultCreationData vaultCreationData, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsCreateVault");
            // verify the required parameter 'vaultCreationData' is set
            if (vaultCreationData == null)
                throw new ApiException(400, "Missing required parameter 'vaultCreationData' when calling VaultsApi->VaultsCreateVault");

            var localVarPath = "/vaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (vaultCreationData != null && vaultCreationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vaultCreationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vaultCreationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsCreateVault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns all checked-out documents in the vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <returns>List&lt;Document&gt;</returns>
        public List<Document> VaultsGetCheckedOutDocuments (Guid vaultId, string authorization, bool? includeTags = default(bool?))
        {
             ApiResponse<List<Document>> localVarResponse = VaultsGetCheckedOutDocumentsWithHttpInfo(vaultId, authorization, includeTags);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all checked-out documents in the vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        public ApiResponse<List<Document>> VaultsGetCheckedOutDocumentsWithHttpInfo (Guid vaultId, string authorization, bool? includeTags = default(bool?))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetCheckedOutDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetCheckedOutDocuments");

            var localVarPath = "/vaults/{vaultId}/checked-out-documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (includeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTags", includeTags)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetCheckedOutDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Document>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Document>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Document>)));
        }

        /// <summary>
        /// Returns all checked-out documents in the vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        public async System.Threading.Tasks.Task<List<Document>> VaultsGetCheckedOutDocumentsAsync (Guid vaultId, string authorization, bool? includeTags = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Document>> localVarResponse = await VaultsGetCheckedOutDocumentsWithHttpInfoAsync(vaultId, authorization, includeTags, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all checked-out documents in the vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Document>>> VaultsGetCheckedOutDocumentsWithHttpInfoAsync (Guid vaultId, string authorization, bool? includeTags = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetCheckedOutDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetCheckedOutDocuments");

            var localVarPath = "/vaults/{vaultId}/checked-out-documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (includeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTags", includeTags)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetCheckedOutDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Document>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Document>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Document>)));
        }

        /// <summary>
        /// Returns all of the vault&#39;s document tag definitions 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>TagDefinitionCollections</returns>
        public TagDefinitionCollections VaultsGetDocumentTagDefinitions (Guid vaultId, string authorization)
        {
             ApiResponse<TagDefinitionCollections> localVarResponse = VaultsGetDocumentTagDefinitionsWithHttpInfo(vaultId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all of the vault&#39;s document tag definitions 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of TagDefinitionCollections</returns>
        public ApiResponse<TagDefinitionCollections> VaultsGetDocumentTagDefinitionsWithHttpInfo (Guid vaultId, string authorization)
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetDocumentTagDefinitions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetDocumentTagDefinitions");

            var localVarPath = "/vaults/{vaultId}/documents/tag-definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetDocumentTagDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagDefinitionCollections>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TagDefinitionCollections) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagDefinitionCollections)));
        }

        /// <summary>
        /// Returns all of the vault&#39;s document tag definitions 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TagDefinitionCollections</returns>
        public async System.Threading.Tasks.Task<TagDefinitionCollections> VaultsGetDocumentTagDefinitionsAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TagDefinitionCollections> localVarResponse = await VaultsGetDocumentTagDefinitionsWithHttpInfoAsync(vaultId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all of the vault&#39;s document tag definitions 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TagDefinitionCollections)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagDefinitionCollections>> VaultsGetDocumentTagDefinitionsWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetDocumentTagDefinitions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetDocumentTagDefinitions");

            var localVarPath = "/vaults/{vaultId}/documents/tag-definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetDocumentTagDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagDefinitionCollections>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TagDefinitionCollections) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagDefinitionCollections)));
        }

        /// <summary>
        /// Returns all of the vault&#39;s document tag group definitions 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;TagGroupDefinition&gt;</returns>
        public List<TagGroupDefinition> VaultsGetDocumentTagGroupDefinitions (Guid vaultId, string authorization)
        {
             ApiResponse<List<TagGroupDefinition>> localVarResponse = VaultsGetDocumentTagGroupDefinitionsWithHttpInfo(vaultId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all of the vault&#39;s document tag group definitions 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;TagGroupDefinition&gt;</returns>
        public ApiResponse<List<TagGroupDefinition>> VaultsGetDocumentTagGroupDefinitionsWithHttpInfo (Guid vaultId, string authorization)
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetDocumentTagGroupDefinitions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetDocumentTagGroupDefinitions");

            var localVarPath = "/vaults/{vaultId}/documents/tag-group-definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetDocumentTagGroupDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TagGroupDefinition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TagGroupDefinition>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TagGroupDefinition>)));
        }

        /// <summary>
        /// Returns all of the vault&#39;s document tag group definitions 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TagGroupDefinition&gt;</returns>
        public async System.Threading.Tasks.Task<List<TagGroupDefinition>> VaultsGetDocumentTagGroupDefinitionsAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TagGroupDefinition>> localVarResponse = await VaultsGetDocumentTagGroupDefinitionsWithHttpInfoAsync(vaultId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all of the vault&#39;s document tag group definitions 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TagGroupDefinition&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TagGroupDefinition>>> VaultsGetDocumentTagGroupDefinitionsWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetDocumentTagGroupDefinitions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetDocumentTagGroupDefinitions");

            var localVarPath = "/vaults/{vaultId}/documents/tag-group-definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetDocumentTagGroupDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TagGroupDefinition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TagGroupDefinition>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TagGroupDefinition>)));
        }

        /// <summary>
        /// Returns all of the vault&#39;s document type categories 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;DocumentTypeCategory&gt;</returns>
        public List<DocumentTypeCategory> VaultsGetDocumentTypeCategories (Guid vaultId, string authorization)
        {
             ApiResponse<List<DocumentTypeCategory>> localVarResponse = VaultsGetDocumentTypeCategoriesWithHttpInfo(vaultId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all of the vault&#39;s document type categories 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeCategory&gt;</returns>
        public ApiResponse<List<DocumentTypeCategory>> VaultsGetDocumentTypeCategoriesWithHttpInfo (Guid vaultId, string authorization)
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetDocumentTypeCategories");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetDocumentTypeCategories");

            var localVarPath = "/vaults/{vaultId}/document-type-categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetDocumentTypeCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentTypeCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeCategory>)));
        }

        /// <summary>
        /// Returns all of the vault&#39;s document type categories 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentTypeCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeCategory>> VaultsGetDocumentTypeCategoriesAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentTypeCategory>> localVarResponse = await VaultsGetDocumentTypeCategoriesWithHttpInfoAsync(vaultId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all of the vault&#39;s document type categories 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeCategory>>> VaultsGetDocumentTypeCategoriesWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetDocumentTypeCategories");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetDocumentTypeCategories");

            var localVarPath = "/vaults/{vaultId}/document-type-categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetDocumentTypeCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentTypeCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeCategory>)));
        }

        /// <summary>
        /// Returns all documents in the vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>List&lt;Document&gt;</returns>
        public List<Document> VaultsGetDocuments (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?))
        {
             ApiResponse<List<Document>> localVarResponse = VaultsGetDocumentsWithHttpInfo(vaultId, authorization, includeTags, count, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all documents in the vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        public ApiResponse<List<Document>> VaultsGetDocumentsWithHttpInfo (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetDocuments");

            var localVarPath = "/vaults/{vaultId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (includeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTags", includeTags)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Document>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Document>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Document>)));
        }

        /// <summary>
        /// Returns all documents in the vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        public async System.Threading.Tasks.Task<List<Document>> VaultsGetDocumentsAsync (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Document>> localVarResponse = await VaultsGetDocumentsWithHttpInfoAsync(vaultId, authorization, includeTags, count, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all documents in the vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags for each document in response should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Document>>> VaultsGetDocumentsWithHttpInfoAsync (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetDocuments");

            var localVarPath = "/vaults/{vaultId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (includeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTags", includeTags)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Document>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Document>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Document>)));
        }

        /// <summary>
        /// Returns all of the vault&#39;s magnets 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;Magnet&gt;</returns>
        public List<Magnet> VaultsGetMagnets (Guid vaultId, string authorization)
        {
             ApiResponse<List<Magnet>> localVarResponse = VaultsGetMagnetsWithHttpInfo(vaultId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all of the vault&#39;s magnets 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;Magnet&gt;</returns>
        public ApiResponse<List<Magnet>> VaultsGetMagnetsWithHttpInfo (Guid vaultId, string authorization)
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetMagnets");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetMagnets");

            var localVarPath = "/vaults/{vaultId}/magnets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetMagnets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Magnet>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Magnet>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Magnet>)));
        }

        /// <summary>
        /// Returns all of the vault&#39;s magnets 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Magnet&gt;</returns>
        public async System.Threading.Tasks.Task<List<Magnet>> VaultsGetMagnetsAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Magnet>> localVarResponse = await VaultsGetMagnetsWithHttpInfoAsync(vaultId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all of the vault&#39;s magnets 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Magnet&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Magnet>>> VaultsGetMagnetsWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetMagnets");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetMagnets");

            var localVarPath = "/vaults/{vaultId}/magnets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetMagnets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Magnet>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Magnet>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Magnet>)));
        }

        /// <summary>
        /// Returns all of the vault&#39;s members 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;VaultMember&gt;</returns>
        public List<VaultMember> VaultsGetMembers (Guid vaultId, string authorization)
        {
             ApiResponse<List<VaultMember>> localVarResponse = VaultsGetMembersWithHttpInfo(vaultId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all of the vault&#39;s members 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;VaultMember&gt;</returns>
        public ApiResponse<List<VaultMember>> VaultsGetMembersWithHttpInfo (Guid vaultId, string authorization)
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetMembers");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetMembers");

            var localVarPath = "/vaults/{vaultId}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VaultMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<VaultMember>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VaultMember>)));
        }

        /// <summary>
        /// Returns all of the vault&#39;s members 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;VaultMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<VaultMember>> VaultsGetMembersAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<VaultMember>> localVarResponse = await VaultsGetMembersWithHttpInfoAsync(vaultId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all of the vault&#39;s members 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;VaultMember&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VaultMember>>> VaultsGetMembersWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetMembers");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetMembers");

            var localVarPath = "/vaults/{vaultId}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VaultMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<VaultMember>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VaultMember>)));
        }

        /// <summary>
        /// Returns stamps of a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;Stamp&gt;</returns>
        public List<Stamp> VaultsGetStamps (Guid vaultId, string authorization)
        {
             ApiResponse<List<Stamp>> localVarResponse = VaultsGetStampsWithHttpInfo(vaultId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns stamps of a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;Stamp&gt;</returns>
        public ApiResponse<List<Stamp>> VaultsGetStampsWithHttpInfo (Guid vaultId, string authorization)
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetStamps");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetStamps");

            var localVarPath = "/vaults/{vaultId}/stamps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetStamps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Stamp>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Stamp>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Stamp>)));
        }

        /// <summary>
        /// Returns stamps of a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Stamp&gt;</returns>
        public async System.Threading.Tasks.Task<List<Stamp>> VaultsGetStampsAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Stamp>> localVarResponse = await VaultsGetStampsWithHttpInfoAsync(vaultId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns stamps of a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Stamp&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Stamp>>> VaultsGetStampsWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetStamps");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetStamps");

            var localVarPath = "/vaults/{vaultId}/stamps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetStamps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Stamp>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Stamp>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Stamp>)));
        }

        /// <summary>
        /// Returns information about all documents that are in the recycle bin of the vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>List&lt;Document&gt;</returns>
        public List<Document> VaultsGetTrashedDocuments (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?))
        {
             ApiResponse<List<Document>> localVarResponse = VaultsGetTrashedDocumentsWithHttpInfo(vaultId, authorization, includeTags, count, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about all documents that are in the recycle bin of the vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        public ApiResponse<List<Document>> VaultsGetTrashedDocumentsWithHttpInfo (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetTrashedDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetTrashedDocuments");

            var localVarPath = "/vaults/{vaultId}/trashed-documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (includeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTags", includeTags)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetTrashedDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Document>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Document>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Document>)));
        }

        /// <summary>
        /// Returns information about all documents that are in the recycle bin of the vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        public async System.Threading.Tasks.Task<List<Document>> VaultsGetTrashedDocumentsAsync (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Document>> localVarResponse = await VaultsGetTrashedDocumentsWithHttpInfoAsync(vaultId, authorization, includeTags, count, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns information about all documents that are in the recycle bin of the vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="includeTags">Decides if tags should be included (optional - default false) (optional)</param>
        /// <param name="count">Count of returned documents (optional - default 50) (optional)</param>
        /// <param name="offset">Offset of the first returned documents (optional - default 0) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Document>>> VaultsGetTrashedDocumentsWithHttpInfoAsync (Guid vaultId, string authorization, bool? includeTags = default(bool?), int? count = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetTrashedDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetTrashedDocuments");

            var localVarPath = "/vaults/{vaultId}/trashed-documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (includeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTags", includeTags)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetTrashedDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Document>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Document>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Document>)));
        }

        /// <summary>
        /// Returns user groups of a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;UserGroup&gt;</returns>
        public List<UserGroup> VaultsGetUserGroups (Guid vaultId, string authorization)
        {
             ApiResponse<List<UserGroup>> localVarResponse = VaultsGetUserGroupsWithHttpInfo(vaultId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns user groups of a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;UserGroup&gt;</returns>
        public ApiResponse<List<UserGroup>> VaultsGetUserGroupsWithHttpInfo (Guid vaultId, string authorization)
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetUserGroups");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetUserGroups");

            var localVarPath = "/vaults/{vaultId}/user-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetUserGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserGroup>)));
        }

        /// <summary>
        /// Returns user groups of a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;UserGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserGroup>> VaultsGetUserGroupsAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UserGroup>> localVarResponse = await VaultsGetUserGroupsWithHttpInfoAsync(vaultId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns user groups of a vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UserGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserGroup>>> VaultsGetUserGroupsWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetUserGroups");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetUserGroups");

            var localVarPath = "/vaults/{vaultId}/user-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetUserGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserGroup>)));
        }

        /// <summary>
        /// Returns the requested vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>Vault</returns>
        public Vault VaultsGetVault (Guid vaultId, string authorization)
        {
             ApiResponse<Vault> localVarResponse = VaultsGetVaultWithHttpInfo(vaultId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of Vault</returns>
        public ApiResponse<Vault> VaultsGetVaultWithHttpInfo (Guid vaultId, string authorization)
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetVault");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetVault");

            var localVarPath = "/vaults/{vaultId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetVault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vault>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Vault) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vault)));
        }

        /// <summary>
        /// Returns the requested vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Vault</returns>
        public async System.Threading.Tasks.Task<Vault> VaultsGetVaultAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Vault> localVarResponse = await VaultsGetVaultWithHttpInfoAsync(vaultId, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the requested vault 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Vault)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Vault>> VaultsGetVaultWithHttpInfoAsync (Guid vaultId, string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsGetVault");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetVault");

            var localVarPath = "/vaults/{vaultId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetVault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vault>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Vault) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vault)));
        }

        /// <summary>
        /// Returns all of the user&#39;s vaults 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>List&lt;Vault&gt;</returns>
        public List<Vault> VaultsGetVaults (string authorization)
        {
             ApiResponse<List<Vault>> localVarResponse = VaultsGetVaultsWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all of the user&#39;s vaults 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <returns>ApiResponse of List&lt;Vault&gt;</returns>
        public ApiResponse<List<Vault>> VaultsGetVaultsWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetVaults");

            var localVarPath = "/vaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetVaults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Vault>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Vault>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Vault>)));
        }

        /// <summary>
        /// Returns all of the user&#39;s vaults 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Vault&gt;</returns>
        public async System.Threading.Tasks.Task<List<Vault>> VaultsGetVaultsAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Vault>> localVarResponse = await VaultsGetVaultsWithHttpInfoAsync(authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all of the user&#39;s vaults 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Vault&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Vault>>> VaultsGetVaultsWithHttpInfoAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsGetVaults");

            var localVarPath = "/vaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsGetVaults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Vault>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Vault>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Vault>)));
        }

        /// <summary>
        /// Creates a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="document">Model of the new document</param>
        /// <returns>Object</returns>
        public Object VaultsPostDocument (Guid vaultId, string authorization, NewDocument document)
        {
             ApiResponse<Object> localVarResponse = VaultsPostDocumentWithHttpInfo(vaultId, authorization, document);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="document">Model of the new document</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> VaultsPostDocumentWithHttpInfo (Guid vaultId, string authorization, NewDocument document)
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsPostDocument");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsPostDocument");
            // verify the required parameter 'document' is set
            if (document == null)
                throw new ApiException(400, "Missing required parameter 'document' when calling VaultsApi->VaultsPostDocument");

            var localVarPath = "/vaults/{vaultId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (document != null && document.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(document); // http body (model) parameter
            }
            else
            {
                localVarPostBody = document; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsPostDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="document">Model of the new document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> VaultsPostDocumentAsync (Guid vaultId, string authorization, NewDocument document, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await VaultsPostDocumentWithHttpInfoAsync(vaultId, authorization, document, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a document 
        /// </summary>
        /// <exception cref="AmagnoWebApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vaultId">GUID of the vault</param>
        /// <param name="authorization">Bearer JSON Web Token</param>
        /// <param name="document">Model of the new document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VaultsPostDocumentWithHttpInfoAsync (Guid vaultId, string authorization, NewDocument document, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'vaultId' is set
            if (vaultId == null)
                throw new ApiException(400, "Missing required parameter 'vaultId' when calling VaultsApi->VaultsPostDocument");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling VaultsApi->VaultsPostDocument");
            // verify the required parameter 'document' is set
            if (document == null)
                throw new ApiException(400, "Missing required parameter 'document' when calling VaultsApi->VaultsPostDocument");

            var localVarPath = "/vaults/{vaultId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/html", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vaultId != null) localVarPathParams.Add("vaultId", this.Configuration.ApiClient.ParameterToString(vaultId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (document != null && document.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(document); // http body (model) parameter
            }
            else
            {
                localVarPostBody = document; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VaultsPostDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}

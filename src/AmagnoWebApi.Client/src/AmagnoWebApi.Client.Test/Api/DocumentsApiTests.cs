/* 
 * AMAGNO HTTP/REST API Version 2
 *
 * <span>Use your own or the cloud version of AMAGNO with REST/JSON!</span>  <br /><br />  <b>General</b>  <br /><br />  <span>      The AMAGNO API uses the HTTP methods GET and POST to communicate with the service. This mechanism is often called REST. It returns either JSON for informations or direct stream with the actual content type for files. A simple response looks like this:  </span>  <code>      {      \"id\": \"61776573-6f6d-6520-6578-616d706c6521\",      \"name\": \"Document.pdf\"      }  </code>  <span>      If your AMAGNO server has the name \"myserver\", the URL to the AMAGNO API would be \"https://myserver/amagnome/api/v2/\".<br />      For this individual URL we will use the term <b>BASEURL</b> in the further documentation.  </span>  <br /><br />  <b>Authentication</b>  <br /><br />  <span>      API requests are only allowed by authenticated users. To authenticate users the AMAGNO API uses <a href=\"https://tools.ietf.org/html/rfc7519\">JSON Web Token</a>.      To receive this token a POST-request to https://myserver/amagnome/api/v2/token with credentials in body should be sent. Request example:  </span>  <code>      curl -X POST - -header 'Content-Type: application/json' - -header 'Accept: application/json' -d '{      \"userName\": \"user@company.com\",      \"password\": \"password\"      }' 'http://myserver/amagnome/api/v2/token'  </code>  <span>      If the data that is sent is correct, a response will be returned including HTTP status code \"200\" and the token within the body. To make other API requests this token should be sent in the HTTP header with the name \"Authorization\"      and the value \"Bearer {token}\". The expiration time is defined in the configuration (web.config of AmagnoRestApi2, AppSettings, Key \"JwtExpirationInMinutes\").  </span><br /><br />  <b>Security</b>  <br /><br />  <span>Only use the API via HTTPS and always make sure to validate the certificate on the client side.</span>  <br /><br />  <b>Request Example</b>  <br /><br />  <span>https://myserver/amagnome/api/v2/vaults with HTTP header \"Authorization\": \"Bearer token\"</span>  <br /><br />  <b>HTTP response codes</b>  <br />  <table>      <tbody>      <tr>          <td>              <p><span>Code</span></p>          </td>          <td>              <p><span>Description</span></p>          </td>      </tr>      <tr>          <td>              <p>2xx</p>          </td>          <td>              <p>The request was successful.</p>          </td>      </tr>      <tr>          <td>              <p>4xx</p>          </td>          <td>              <p>The request was not successful. Change the request to make it work.</p>          </td>      </tr>      <tr>          <td>              <p>5xx</p>          </td>          <td>              <p>An error occurred on the server side. Please try again.</p>          </td>      </tr>      </tbody>  </table>  <code></code>  <br />  <b>Unsuccessful request details</b>  <br /><br />        <span>            For responses with http status codes 400, 403 or 500, there are also error codes and messages in JSON format in the body of the response sent. For example:        </span>  <code>      {      \"code\": 2010,      \"message\": \"Document with same file exists in vault\"      }  </code>  <span>      \"code\" is an error identifier and \"message\" presents a 'human-friendly' phrase. When responses are sent by the IIS (Internet Information Service), this information is not displayed.  </span>  <br /><br />  <b>GUIDs</b>  <br /><br />  <span>      The AMAGNO API works mainly with worldwide unique identification numbers to address elements like vaults, magnets, documents amongst other things - known as GUID.<br />      Many requests will return element GUIDs.<br />      If you want to address a specific element in your AMAGNO, e.g.: a vault; you can find out the corresponding element's GUID. In order to do this, please log in to your AMAGNO Client for Windows and activate the Developer Mode in the Help Menu of your User Profile. For more information, please consult the AMAGNO User Manual.  </span>  <br /><br />  
 *
 * The version of the OpenAPI document: v2
 * Contact: support@amagno.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using AmagnoWebApi.Client.Client;
using AmagnoWebApi.Client.Api;
using AmagnoWebApi.Client.Model;

namespace AmagnoWebApi.Client.Test
{
    /// <summary>
    ///  Class for testing DocumentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DocumentsApiTests
    {
        private DocumentsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DocumentsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DocumentsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DocumentsApi
            //Assert.IsInstanceOf(typeof(DocumentsApi), instance);
        }

        
        /// <summary>
        /// Test DocumentsAssign
        /// </summary>
        [Test]
        public void DocumentsAssignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //AssignmentCreationData assignment = null;
            //var response = instance.DocumentsAssign(authorization, assignment);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsCheckOut
        /// </summary>
        [Test]
        public void DocumentsCheckOutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //var response = instance.DocumentsCheckOut(documentId, authorization);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsCreateHighlightAnnotation
        /// </summary>
        [Test]
        public void DocumentsCreateHighlightAnnotationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //HighlightAnnotationCreationData model = null;
            //var response = instance.DocumentsCreateHighlightAnnotation(documentId, authorization, model);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsCreateInkAnnotation
        /// </summary>
        [Test]
        public void DocumentsCreateInkAnnotationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //InkAnnotationCreationData model = null;
            //var response = instance.DocumentsCreateInkAnnotation(documentId, authorization, model);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsCreateMarkLineAnnotation
        /// </summary>
        [Test]
        public void DocumentsCreateMarkLineAnnotationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //MarkLineAnnotationCreationData model = null;
            //var response = instance.DocumentsCreateMarkLineAnnotation(documentId, authorization, model);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsCreateNoteAnnotation
        /// </summary>
        [Test]
        public void DocumentsCreateNoteAnnotationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //NoteAnnotationCreationData model = null;
            //var response = instance.DocumentsCreateNoteAnnotation(documentId, authorization, model);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsCreateSignatureAnnotation
        /// </summary>
        [Test]
        public void DocumentsCreateSignatureAnnotationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //SignatureAnnotationCreationData model = null;
            //var response = instance.DocumentsCreateSignatureAnnotation(documentId, authorization, model);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsCreateTagGroup
        /// </summary>
        [Test]
        public void DocumentsCreateTagGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //TagGroupCreationData model = null;
            //var response = instance.DocumentsCreateTagGroup(documentId, authorization, model);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsGet
        /// </summary>
        [Test]
        public void DocumentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //bool? includeTags = null;
            //var response = instance.DocumentsGet(documentId, authorization, includeTags);
            //Assert.IsInstanceOf(typeof(Document), response, "response is Document");
        }
        
        /// <summary>
        /// Test DocumentsGetAccessibleStamps
        /// </summary>
        [Test]
        public void DocumentsGetAccessibleStampsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //var response = instance.DocumentsGetAccessibleStamps(documentId, authorization);
            //Assert.IsInstanceOf(typeof(List<Stamp>), response, "response is List<Stamp>");
        }
        
        /// <summary>
        /// Test DocumentsGetAdvancedSearchInformation
        /// </summary>
        [Test]
        public void DocumentsGetAdvancedSearchInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid searchId = null;
            //string authorization = null;
            //var response = instance.DocumentsGetAdvancedSearchInformation(searchId, authorization);
            //Assert.IsInstanceOf(typeof(SearchInformation), response, "response is SearchInformation");
        }
        
        /// <summary>
        /// Test DocumentsGetAdvancedSearchResults
        /// </summary>
        [Test]
        public void DocumentsGetAdvancedSearchResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid searchId = null;
            //string authorization = null;
            //bool? includeTags = null;
            //int? count = null;
            //int? offset = null;
            //var response = instance.DocumentsGetAdvancedSearchResults(searchId, authorization, includeTags, count, offset);
            //Assert.IsInstanceOf(typeof(List<Document>), response, "response is List<Document>");
        }
        
        /// <summary>
        /// Test DocumentsGetAnnotations
        /// </summary>
        [Test]
        public void DocumentsGetAnnotationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //var response = instance.DocumentsGetAnnotations(documentId, authorization);
            //Assert.IsInstanceOf(typeof(AnnotationCollections), response, "response is AnnotationCollections");
        }
        
        /// <summary>
        /// Test DocumentsGetAssigns
        /// </summary>
        [Test]
        public void DocumentsGetAssignsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //var response = instance.DocumentsGetAssigns(documentId, authorization);
            //Assert.IsInstanceOf(typeof(AssignmentCollections), response, "response is AssignmentCollections");
        }
        
        /// <summary>
        /// Test DocumentsGetOriginalFormat
        /// </summary>
        [Test]
        public void DocumentsGetOriginalFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //var response = instance.DocumentsGetOriginalFormat(documentId, authorization);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsGetPDFFormat
        /// </summary>
        [Test]
        public void DocumentsGetPDFFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //var response = instance.DocumentsGetPDFFormat(documentId, authorization);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsGetPDFFormatWithAnnotations
        /// </summary>
        [Test]
        public void DocumentsGetPDFFormatWithAnnotationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //var response = instance.DocumentsGetPDFFormatWithAnnotations(documentId, authorization);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsGetPreviewImage
        /// </summary>
        [Test]
        public void DocumentsGetPreviewImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //int page = null;
            //string size = null;
            //string authorization = null;
            //var response = instance.DocumentsGetPreviewImage(documentId, page, size, authorization);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsGetSearchInformation
        /// </summary>
        [Test]
        public void DocumentsGetSearchInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid searchId = null;
            //string authorization = null;
            //var response = instance.DocumentsGetSearchInformation(searchId, authorization);
            //Assert.IsInstanceOf(typeof(SearchInformation), response, "response is SearchInformation");
        }
        
        /// <summary>
        /// Test DocumentsGetSearchResults
        /// </summary>
        [Test]
        public void DocumentsGetSearchResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid searchId = null;
            //string authorization = null;
            //bool? includeTags = null;
            //int? count = null;
            //int? offset = null;
            //var response = instance.DocumentsGetSearchResults(searchId, authorization, includeTags, count, offset);
            //Assert.IsInstanceOf(typeof(List<Document>), response, "response is List<Document>");
        }
        
        /// <summary>
        /// Test DocumentsGetTagDefinitions
        /// </summary>
        [Test]
        public void DocumentsGetTagDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //var response = instance.DocumentsGetTagDefinitions(authorization);
            //Assert.IsInstanceOf(typeof(TagDefinitionCollections), response, "response is TagDefinitionCollections");
        }
        
        /// <summary>
        /// Test DocumentsGetTagGroups
        /// </summary>
        [Test]
        public void DocumentsGetTagGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //var response = instance.DocumentsGetTagGroups(documentId, authorization);
            //Assert.IsInstanceOf(typeof(List<TagGroup>), response, "response is List<TagGroup>");
        }
        
        /// <summary>
        /// Test DocumentsGetTags
        /// </summary>
        [Test]
        public void DocumentsGetTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //var response = instance.DocumentsGetTags(documentId, authorization);
            //Assert.IsInstanceOf(typeof(TagCollections), response, "response is TagCollections");
        }
        
        /// <summary>
        /// Test DocumentsInitAdvancedSearch
        /// </summary>
        [Test]
        public void DocumentsInitAdvancedSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //AdvancedDocumentSearchFilter filter = null;
            //var response = instance.DocumentsInitAdvancedSearch(authorization, filter);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsInitSearch
        /// </summary>
        [Test]
        public void DocumentsInitSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //DocumentSearchFilter filter = null;
            //var response = instance.DocumentsInitSearch(authorization, filter);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsPutStream
        /// </summary>
        [Test]
        public void DocumentsPutStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //string amagnoFileCreateDate = null;
            //string amagnoFileChangeDate = null;
            //var response = instance.DocumentsPutStream(documentId, authorization, UNKNOWN_BASE_TYPE, amagnoFileCreateDate, amagnoFileChangeDate);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsStampDocument
        /// </summary>
        [Test]
        public void DocumentsStampDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //StampingData stampingData = null;
            //var response = instance.DocumentsStampDocument(documentId, authorization, stampingData);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsTrash
        /// </summary>
        [Test]
        public void DocumentsTrashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //var response = instance.DocumentsTrash(documentId, authorization);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DocumentsUpdate
        /// </summary>
        [Test]
        public void DocumentsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid documentId = null;
            //string authorization = null;
            //DocumentUpdateData data = null;
            //var response = instance.DocumentsUpdate(documentId, authorization, data);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
    }

}
